if(typeof jshero==="undefined"){var jshero={}}jshero.koans=function(){var koans=[];var koansMap={};var add=function(koan){koans.push(koan);koansMap[koan.id]=koan};var initReorder=function(order){if(order.length!==koans.length){console.log("ERROR: Koans-Order-Array length unequal to Koans length!")}var koan;koans=[];for(var i=0,l=order.length;i<l;i++){koan=koansMap[order[i]];if(koan!=null){koans.push(koan)}else{throw"ERROR: No koan for koan-Id ".concat(order[i]," in koansMap!")}}};var getKoans=function(){return koans};return{add:add,initReorder:initReorder,getKoans:getKoans}}();if(typeof module!=="undefined"){module.exports=jshero.koans}
jshero.koans.add({id:"backgroundcolor",title:"Dynamische Webseiten",lesson:"Webseiten basieren auf HTML, der Hypertext Markup Language. HTML-Seiten bestehen aus Text und werden\ndurch sogenannte Tags strukturiert. Tags stellen meist einen rechteckigen Bereich der Webseite dar.\nDiese Bereiche k\xF6nnen mit CSS, den Cascading Style Sheets, formatiert werden. Mit CSS kann man die\nPosition, die Gr\xF6\xDFe, die Farbe und vieles mehr der einzelnen Tags festlegen. Eine Einf\xFChrung in HTML\nund CSS findest du auf <a href=\"https://wiki.selfhtml.org\">SELFHTML</a>.<br><br>\n\nHier lernst du exemplarisch, wie man Webseiten mit Hilfe von JavaScript ver\xE4ndern kann.\nSolche Webseiten nennt man auch dynamische Webseiten. Ein gutes Beispiel f\xFCr eine dynamische Webseite ist JS Hero.\nSind auf einer Seite alle Tests gr\xFCn, wechselt die Farbe der oberen Titelleiste von rot auf gr\xFCn.\nDas geschiet mit Hilfe von JavaScript. Einen solchen Farbwechsel wollen wir jetzt programmieren.<br><br>\n\nUm einzelne Tags einer Webseite ver\xE4ndern zu k\xF6nnen, ben\xF6tigt JavaScript eine gesonderte Bibliothek,\ndas Document Object Model (DOM). Diese Bibliothek steht in jedem Browser \xFCber das\n<code>document</code> Objekt zur Verf\xFCgung. Um auf ein Tag, auch HTML-Element genannt, zugreifen zu k\xF6nnen,\nmuss man es identifizieren. Das geht am besten, wenn man dem Tag im HTML Code eine ID, einen\n<a href=\"https://de.wikipedia.org/wiki/Identifikator\">Identifikator</a>, zuweist.\nHat ein Tag die ID <code>content</code>, so sieht der Zugriff wie folgt aus:\n\n<pre><code>let elm = document.getElementById(\"content\");</code></pre>\n\n<code>document</code> besitzt die Methode <code>getElementById</code>. \xDCbergibt man dieser Methode eine ID,\nso liefert sie ein Objekt zur\xFCck, dass das entsprechende HTML-Element repr\xE4sentiert.\nDieses Objekt besitzt nun Eigenschaften und Methoden, mit denen man das HTML-Element ver\xE4ndern kann.\nEine dieser Eigenschaften ist <code>style</code>. Es ist ein Objekt, dass alle CSS-Eigenschaften\ndes HTML-Elements repr\xE4sentiert. Mit diesem Objekt k\xF6nnen wir nun die Hintergrundfarbe eines HTML-Elements\nver\xE4ndern:\n\n<pre><code>let elm = document.getElementById(\"content\");\nelm.style.backgroundColor = 'blue';</code></pre>\n\nIm ersten Schritt holen wir uns mit der bekannten Methode <code>getElementById</code> das HTML-Element.\nIm zweiten Schritt setzen wir die Eigenschaft <code>backgroundColor</code> des <code>style</code>-Objekts\nauf <code>'blue'</code>. Das HTML-Element wir augenblicklich blau.",task:"Unterhalb der Aufgabe befindet sich ein grauer Streifen. Der Streifen ist ein HTML-Element\nmit der ID <code>fixme</code>. Setze die Hintergrundfarbe dieses Streifens auf orange.",hint:"Setze <code>backgroundColor</code> auf <code>'orange'</code>.",solution:"<pre><code>let elm = document.getElementById('fixme');\nelm.style.backgroundColor = 'orange';</code></pre>",tests:[function(){let root=document.getElementById("fixme");let backgroundColor=root.style.backgroundColor;if(backgroundColor==="orange"){return{ok:true,msg:"Die Hintergrundfarbe des Streifens ist <code>'orange'</code>."}}else{return{ok:false,msg:"Die Hintergrundfarbe des Streifens ist nicht <code>'orange'</code>,\nsondern <code>'".concat(backgroundColor,"'</code>.")}}}]});
jshero.koans.add({id:"border",title:"Rahmen",lesson:"HTML-Elementen kann man einen Rahmen geben. Ein Rahmen wird durch drei Eigenschaften beschrieben:\nseine Breite, seine Farbe und sein Aussehen:\n\n<pre><code>let elm = document.getElementById(\"content\");\nelm.style.borderWidth = '1px';\nelm.style.borderColor = 'purple';\nelm.style.borderStyle = 'dotted';</code></pre>\n\nDie Breite des Rahmens wird \xFCber die style-Eigenschaft <code>borderWidth</code> festgelegt. Um die Breite anzugeben,\nben\xF6tigt man neben einer Zahl noch eine Einheit. Eine einfache Einheit ist\n<a href=\"https://de.wikipedia.org/wiki/Pixel\">Pixel</a> (px). Ein Pixel ist meist einem Bildpunkt\nauf dem Bildschirm. Je nach Bildschirm entspricht 1 px etwa 0,3 mm.<br><br>\n\nDie Farbe des Rahmens wird \xFCber die style-Eigenschaft <code>borderColor</code> angegeben. Hier kann man ein\nFarbschl\xFCsselwort oder eine RGB-Farbe angeben.<br><br>\n\nDas Aussehen des Rahmens wird \xFCber die style-Eigenschaft\n<code>borderStyle</code> festgelegt.\nHier stehen die Schl\xFCsselw\xF6rter <code>dotted</code> (gepunkted), <code>dashed</code> (gestrichelt),\n<code>solid</code> (durchgezogem), <code>double</code> (doppelt), <code>groove</code>, <code>ridge</code>,\n<code>inset</code> und <code>outset</code> zur Verf\xFCgung. Die letzten 4 Werte beschreiben verschiedene 3-D Effekte.",task:"Versehe das <code>fixme</code>-Element mit einem Rahmen. Der Rahmen soll durchgezogen und indigo sein sowie\neine Breite von 5 Pixel besitzen.",solution:"<pre><code>let style = document.getElementById('fixme').style;\nstyle.borderWidth = '5px';\nstyle.borderColor = 'indigo';\nstyle.borderStyle = 'solid';</code></pre>",tests:[function(){let root=document.getElementById("fixme");let actual=root.style.borderStyle;if(actual==="solid"){return{ok:true,msg:"Der Rahmen-Style ist <code>'solid'</code>."}}else{return{ok:false,msg:"Der Rahmen-Style ist nicht <code>'solid'</code>, sondern <code>'".concat(actual,"'</code>.")}}},function(){let root=document.getElementById("fixme");let actual=root.style.borderColor;if(actual==="indigo"){return{ok:true,msg:"Die Rahmen-Farbe ist <code>'indigo'</code>."}}else{return{ok:false,msg:"Die Rahmen-Farbe ist nicht <code>'indigo'</code>, sondern <code>'".concat(actual,"'</code>.")}}},function(){let root=document.getElementById("fixme");let actual=root.style.borderWidth;if(actual==="5px"){return{ok:true,msg:"Die Rahmen-Breite betr\xE4gt <code>'5px'</code>."}}else{return{ok:false,msg:"Die Rahmen-Breite betr\xE4gt nicht <code>'5px'</code>, sondern <code>'".concat(actual,"'</code>.")}}}]});
jshero.koans.add({id:"color",title:"Textfarbe",lesson:"Die Textfarbe wird mit der <code>style</code> Eigenschaft <code>color</code> gesetzt:\n\n<pre><code>let elm = document.getElementById(\"content\");\nelm.style.color = 'green';</code></pre>",task:"Setze die Textfarbe des <code>fixme</code>-Elements auf gelb.",hint:"Setze <code>color</code> auf <code>'yellow'</code>.",solution:"<pre><code>let elm = document.getElementById('fixme');\nelm.style.color = 'yellow';</code></pre>",tests:[function(){let root=document.getElementById("fixme");let color=root.style.color;if(color==="yellow"){return{ok:true,msg:"Die Textfarbe ist <code>'yellow'</code>."}}else{return{ok:false,msg:"Die Textfarbe ist nicht <code>'yellow'</code>, sondern <code>'".concat(color,"'</code>.")}}}]});
jshero.koans.add({id:"goodbye",title:"Good bye!",lesson:"Nach \xFCber 100 Lektionen ist es Zeit 'Good bye' zu sagen.\nIch hoffe, dir hat das Tutorial gefallen!",task:"Setze die Hintergrundfarbe des <code>fixme</code>-Elements auf <code>rgb(20, 166, 44)</code>.\nSetze den Text auf <code>Good bye!</code>.",tests:[function(){let root=document.getElementById("fixme");let color=root.style.backgroundColor;if(color==="rgb(20, 166, 44)"){return{ok:true,msg:"Die Hintergrundfarbe ist <code>'rgb(20, 166, 44)'</code>."}}else{return{ok:false,msg:"Die Hintergrundfarbe ist nicht <code>'rgb(20, 166, 44)'</code>, sondern <code>'".concat(color,"'</code>.")}}},function(){let root=document.getElementById("fixme");let text=root.textContent;if(text==="Good bye!"){return{ok:true,msg:"Das <code>fixme</code>-Element enth\xE4lt den Text <code>Good bye!</code>."}}else{return{ok:false,msg:"Das <code>fixme</code>-Element enth\xE4lt nicht den Text <code>Good bye!</code>, sondern den Text\n<code>".concat(text,"</code>.")}}}]});
jshero.koans.add({id:"rgb",title:"RGB-Farben",lesson:"Bisher haben wir Farben \xFCber Schl\xFCsselw\xF6rter wie <code>blue</code>, <code>red</code> oder\n<code>yellow</code> festgelegt. Es gibt viele weitere solcher Schl\xFCsselw\xF6rter wie <code>darkblue</code>\noder <code>forestgreen</code>. Eine vollst\xE4ndige Liste aller Farb-Schl\xFCsselw\xF6rter findest du bei\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/named-color\">MDN web docs</a>.\nMit diesen Schl\xFCsselw\xF6rtern kann man viele, aber bei weitem nicht alle m\xF6glichen Farben darstellen.\nUm jede m\xF6gliche Farbe darzustellen, muss man zu dem in CSS verwendeten\n<a href=\"https://de.wikipedia.org/wiki/SRGB-Farbraum\">sRGB-Farbraum</a> \xFCbergehen.\nDort wird jede Farbe durch ihren Rot-, Gr\xFCn- und Blau-Anteil beschrieben.\nDer Anteil ist eine ganze Zahl zwischen 0 und 255. Mischfarben ergeben sich durch die\n<a href=\"https://de.wikipedia.org/wiki/Additive_Farbmischung\">additive Farbmischung</a>.\n\n<pre><code>let rot = 'rgb(255, 0, 0)';\nlet gruen = 'rgb(0, 255, 0)';\nlet blau = 'rgb(0, 0, 255)';\nlet weiss = 'rgb(255, 255, 255)';\nlet schwarz = 'rgb(0, 0, 0)';\nlet lila = 'rgb(255, 0, 255);'\nlet dunkelrot = 'rgb(150, 0, 0)';\nlet hellrot = 'rgb(255, 50, 50)';\nlet grau = 'rgb(120, 120, 120)';</code></pre>",task:"Setze die Hintergrundfarbe des <code>fixme</code>-Elements auf <code>rgb(190, 220, 200)</code>\nund die Textfarbe auf <code>rgb(10, 30, 230)</code>.",solution:"<pre><code>let style = document.getElementById('fixme').style;\nstyle.backgroundColor = 'rgb(190, 220, 200)';\nstyle.color = 'rgb(10, 30, 230)';</code></pre>",tests:[function(){let root=document.getElementById("fixme");let color=root.style.backgroundColor;if(color==="rgb(190, 220, 200)"){return{ok:true,msg:"Die Hintergrundfarbe ist <code>'rgb(190, 220, 200)'</code>."}}else{return{ok:false,msg:"Die Hintergrundfarbe ist nicht <code>'rgb(190, 220, 200)'</code>, sondern <code>'".concat(color,"'</code>.")}}},function(){let root=document.getElementById("fixme");let color=root.style.color;if(color==="rgb(10, 30, 230)"){return{ok:true,msg:"Die Textfarbe ist <code>'rgb(10, 30, 230)'</code>."}}else{return{ok:false,msg:"Die Textfarbe ist nicht <code>'rgb(10, 30, 230)'</code>, sondern <code>'".concat(color,"'</code>.")}}}]});
jshero.koans.add({id:"textcontent",title:"Text \xE4ndern",lesson:"Mit der Eigenschaft <code>textContent</code> kann man Text in ein HTML-Element schreiben:\n\n<pre><code>let elm = document.getElementById(\"content\");\nelm.textContent = 'New content!';</code></pre>\n\nDer alte Inhalt des HTML-Elements wird mit dem zugewiesenen String \xFCberschrieben.",task:"Setze den Text des <code>fixme</code>-Elements auf <code>Hello HTML!</code>.",solution:"<pre><code>let elm = document.getElementById('fixme');\nelm.textContent = 'Hello HTML!';</code></pre>",tests:[function(){let root=document.getElementById("fixme");let text=root.textContent;if(text==="Hello HTML!"){return{ok:true,msg:"Das <code>fixme</code>-Element enth\xE4lt den Text <code>Hello HTML!</code>."}}else{return{ok:false,msg:"Das <code>fixme</code>-Element enth\xE4lt nicht den Text <code>Hello HTML!</code>, sondern den Text\n<code>".concat(text,"</code>.")}}}]});
jshero.koans.initReorder(["backgroundcolor","color","rgb","border","textcontent","goodbye"]);
