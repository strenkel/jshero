if(typeof jshero==="undefined"){var jshero={}}jshero.koans=function(){var koans=[];var koansMap={};var add=function(koan){koans.push(koan);koansMap[koan.id]=koan};var initReorder=function(order){if(order.length!==koans.length){console.log("ERROR: Koans-Order-Array length unequal to Koans length!")}var koan;koans=[];for(var i=0,l=order.length;i<l;i++){koan=koansMap[order[i]];if(koan!=null){koans.push(koan)}else{throw"ERROR: No koan for koan-Id ".concat(order[i]," in koansMap!")}}};var getKoans=function(){return koans};return{add:add,initReorder:initReorder,getKoans:getKoans}}();if(typeof module!=="undefined"){module.exports=jshero.koans}
jshero.koans.add({id:"arguments",title:"The arguments object",lesson:"Inside every function an <code>arguments</code> object is accessible.\nIt is an Array-like object that contains the values of the arguments passed to the function.\n\n<pre><code>function add() {\n  let arg0 = arguments[0];\n  let arg1 = arguments[1];\n  return arg0 + arg1;\n}\n\nlet sum = add(1, 2);</code></pre>\n\n<code>add</code> is called with arguments <code>1</code> and <code>2</code>.\nSo <code>arguments[0]</code> contains the value <code>1</code> and <code>arguments[1]</code> contains the value\n<code>2</code>.<br><br>\nWith the <code>arguments</code> object you can access the passed arguments without parameters.\nThis is useful, for example, if you want to write a function that processes an arbitrary number of arguments.\n\n<pre><code>function add() {\n  let sum = 0;\n  for (let i = 0; i < arguments.length; i++) {\n    sum = sum + arguments[i];\n  }\n  return sum;\n}\n\nlet s1 = add(2, 4);\nlet s2 = add(2, 3, 5, 7);</code></pre>\n\nWe iterate over all passed arguments and sum them up.\nThereby <code>arguments.length</code> returns the number of passed arguments.\nNow we can call <code>add</code> with an arbitrary number of arguments.",task:"Write a function <code>max</code> that calculates the maximum of an arbitrary number of numbers.<br><br>\nExample: <code>max(1, 2)</code> should return <code>2</code> and <code>max(2, 3, 1)</code> should return <code>3</code>.",tests:[function(){return jshero.testutil.assert_isFunction("max")},function(){return jshero.testutil.assert_functionReturns("max(1)",1)},function(){return jshero.testutil.assert_functionReturns("max(15, 2)",15)},function(){return jshero.testutil.assert_functionReturns("max(1, 15, 3)",15)},function(){return jshero.testutil.assert_functionReturns("max(-1, 0, 9, 8)",9)}]});
jshero.koans.add({id:"array",title:"Arrays",lesson:"Arrays are objects for storing multiple values. Arrays are preferably created with square brackets.\n\n<pre><code>let languages = ['C', 'C++', 'Java'];\nlet primes = [2, 3, 5, 7, 11];\nlet emptyArray = [];\nlet a = 'Douglas';\nlet b = 12;\nlet c = true;\nlet someValues = [a, b, c];</code></pre>",task:"Write a function <code>toArray</code> that takes 2 values and returns these values in an array.<br><br>\nExample: <code>toArray(5,&nbsp;9)</code> should return the array <code>[5,&nbsp;9]</code>.",hint:"<pre><code>function toArray(a, b) {\n  return [...];\n}</code></pre>",solution:"<pre><code>function toArray(a, b) {\n  return [a, b];\n}</code></pre>",tests:[function(){return jshero.testutil.assert_isFunction("toArray")},function(){return jshero.testutil.assert_functionHasNumOfParameter("toArray",2)},function(){return jshero.testutil.assert_functionReturnsType("toArray(1, 2)","Array")},function(){return jshero.testutil.assert_functionReturns("toArray(1, 2)",[1,2])},function(){return jshero.testutil.assert_functionReturns("toArray('Tom', 'Huck')",["Tom","Huck"])}]});
jshero.koans.add({id:"array2",title:"Get array elements",lesson:"The elements of an array are accessed by an index beginning with 0.\n\n<pre><code>let languages = ['C', 'C++', 'Java'];\nlet c = languages[0];\nlet cPlusPlus = languages[1];\nlet java = languages[2];</code></pre>",task:"Write a function <code>getFirstElement</code> that takes an array and returns the first element of the array.<br><br>\nExample: <code>getFirstElement([1, 2])</code> should return <code>1</code>.",hint:"<pre><code>function getFirstElement(arr) {\n  return ...\n}</code></pre>",solution:"<pre><code>function getFirstElement(arr) {\n  return arr[0];\n}</code></pre>",tests:[function(){return jshero.testutil.assert_isFunction("getFirstElement")},function(){return jshero.testutil.assert_functionHasNumOfParameter("getFirstElement",1)},function(){return jshero.testutil.assert_functionReturns("getFirstElement([1, 2])",1)},function(){return jshero.testutil.assert_functionReturns("getFirstElement(['Firefox', 'Chrome'])","Firefox")}]});
jshero.koans.add({id:"array3",title:"Set array elements",lesson:"Just as you can get array elements by an index, you can set them by this index.\nIt does not matter whether the array was previously filled or empty.\n\n<pre><code>let languages = [];\nlanguages[0] = 'C';\nlanguages[1] = 'C++';\nlanguages[2] = 'Java';</code></pre>\n\nHere an empty array is filled successively with the listed values.",task:"Write a function <code>setFirstElement</code> that takes an array and an arbitrary variable.\nThe variable should be inserted as the first element in the array. The array should be returned.<br><br>\nExample: <code>setFirstElement([1,&nbsp;2],&nbsp;3)</code> should return <code>[3,&nbsp;2]</code>.",hint:"<pre><code>function setFirstElement(anArray, firstElement) {\n  ...\n  return anArray;\n}</code></pre>",solution:"<pre><code>function setFirstElement(anArray, firstElement) {\n  anArray[0] = firstElement;\n  return anArray;\n}</code></pre>",tests:[function(){return jshero.testutil.assert_isFunction("setFirstElement")},function(){return jshero.testutil.assert_functionHasNumOfParameter("setFirstElement",2)},function(){return jshero.testutil.assert_functionReturns("setFirstElement([1, 2], 3)",[3,2])},function(){return jshero.testutil.assert_functionReturns("setFirstElement([], 1)",[1])},function(){return jshero.testutil.assert_functionReturns("setFirstElement(['a', 'b', 'c'], 'x')",["x","b","c"])}]});
jshero.koans.add({id:"arrayindexof",title:"Array: indexOf()",lesson:"The <code>indexOf</code> method returns the first index at which a given element can be found in the array,\nor -1 if it is not present. Counting starts with 0.\n\n<pre><code>let systems = ['Debian', 'Ubuntu', 'Mint'];\nlet i1 = systems.indexOf('Mint');\nlet i2 = systems.indexOf('Windows');</code></pre>\n\n<code>i1</code> gets the value <code>2</code> and <code>i2</code> gets the value <code>-1</code>.\nFor a complete reference see\n<a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf'>\nMDN&nbsp;web&nbsp;docs</a>.",task:"Write a function <code>add</code> that adds an element to the end of an array.\nHowever, the element should only be added if it is not already in the array.<br><br>\nExample: <code>add([1,&nbsp;2],&nbsp;3)</code> should return <code>[1,&nbsp;2,&nbsp;3]</code> and\n<code>add([1,&nbsp;2],&nbsp;2)</code> should return <code>[1,&nbsp;2]</code>.",hint:"Use an <code>if</code> statement together with the array methods <code>indexOf()</code> and <code>push()</code>.",solution:"<pre><code>function add(arr, elm) {\n  if (arr.indexOf(elm) === -1) {\n    arr.push(elm);\n  }\n  return arr;\n}</code></pre>",tests:[function(){return jshero.testutil.assert_isFunction("add")},function(){return jshero.testutil.assert_functionHasNumOfParameter("add",2)},function(){return jshero.testutil.assert_functionReturns("add(['J'], 'S')",["J","S"])},function(){return jshero.testutil.assert_functionReturns("add(['J'], 'J')",["J"])},function(){return jshero.testutil.assert_functionReturns("add([1, 2], 3)",[1,2,3])},function(){return jshero.testutil.assert_functionReturns("add([1, 2], 2)",[1,2])}]});
(function(testutil){jshero.koans.add({id:"arraylength",title:"Array: length",lesson:"Like strings, arrays have the property <code>length</code>. Here it returns the number of elements in the array:\n\n<pre><code>let languages = [];\nlet len0 = languages.length;\nlanguages[0] = 'C';\nlet len1 = languages.length;\nlanguages[1] = 'C++';\nlet len2 = languages.length;</code></pre>\n\nThe empty array contains no elements. <code>len0</code> is <code>0</code>.\nNow we fill the array step by step. <code>len1</code> is <code>1</code> and <code>len2</code> is <code>2</code>.",task:"Write a function <code>getLastElement</code> that takes an array and returns the last element of the array.<br><br>\nExample: <code>getLastElement([1,&nbsp;2])</code> should return <code>2</code>.",hint:"Determine the index of the last element with the <code>length</code> property.\nTake into account that the first element in the array has the index <code>0</code>.",solution:"<pre><code>function getLastElement(anArray) {\n  let lastIndex = anArray.length - 1;\n  return anArray[lastIndex];\n}</code></pre>",tests:[function(){return testutil.assert_isFunction("getLastElement")},function(){return testutil.assert_functionHasNumOfParameter("getLastElement",1)},function(){return testutil.assert_functionReturns("getLastElement([1, 2])",2)},function(){return testutil.assert_functionReturns("getLastElement(['a', 'b', 'c'])","c")}]})})(jshero.testutil);
jshero.koans.add({id:"arraypush",title:"Array: shift() and push()",lesson:"Like strings, arrays have several methods. Two of these methods are <code>shift</code> and <code>push</code>.\nTo remind you: Methods are functions that are applied to an object, here an array. Methods are appended with a point to the object.\n<br><br>\nThe array method <code>shift</code> removes the first element from an array and returns that element.\nThe length of the array is reduced by 1.\n\n<pre><code>let languages = ['C', 'Java', 'JavaScript'];\nlet firstLanguage = languages.shift();</code></pre>\n\nThe array <code>languages</code> is created with 3 programming languages.\nAfter <code>shift</code> the array <code>languages</code> contains only 2 items,\nviz. <code>['Java', 'JavaScript']</code>. The value <code>'C'</code> is stored in <code>firstLanguage</code>.\n<br><br>\nThe method <code>push</code> adds a new element to an array.\nThe new element is passed as a parameter and is added to the end of the array.\n\n<pre><code>let languages = [];\nlanguages.push('C');\nlanguages.push('Java');\nlanguages.push('JavaScript');</code></pre>\n\nHere an empty array is filled successively with the passed values.\nFinally we get the array <code>['C', 'Java', 'JavaScript']</code>.",task:"Write a function <code>rotate</code> that rotates the elements of an array.\nAll elements should be moved one position to the left.\nThe 0th element should be placed at the end of the array. The rotated array should be returned.<br><br>\nExample: <code>rotate(['a',&nbsp;'b',&nbsp;'c'])</code> should return <code>['b',&nbsp;'c',&nbsp;'a']</code>.",hint:"Remove the 0th element with <code>shift</code>.\nAdd it again with <code>push</code>.",solution:"<pre><code>function rotate(anArray) {\n  let element0 = anArray.shift();\n  anArray.push(element0);\n  return anArray;\n}</code></pre>",tests:[function(){return jshero.testutil.assert_isFunction("rotate")},function(){return jshero.testutil.assert_functionHasNumOfParameter("rotate",1)},function(){return jshero.testutil.assert_functionReturns("rotate([1, 2])",[2,1])},function(){return jshero.testutil.assert_functionReturns("rotate(['a', 'b', 'c'])",["b","c","a"])},function(){return jshero.testutil.assert_functionReturns("rotate([1, 'b', 'c', 37])",["b","c",37,1])}]});
jshero.koans.add({id:"arraysort",title:"Sorting arrays",lesson:"Now we can sort arrays with given length.",task:"Write a function <code>sort</code> that takes an array filled with 3 numbers and returns these 3 numbers sorted in\nascending order as an array.<br><br>\nExample: <code>sort([2,&nbsp;3,&nbsp;1])</code> should return <code>[1,&nbsp;2,&nbsp;3]</code>.",tests:[function(){return jshero.testutil.assert_isFunction("sort")},function(){return jshero.testutil.assert_functionHasNumOfParameter("sort",1)},function(){return jshero.testutil.assert_functionReturns("sort([1, 2, 3])",[1,2,3])},function(){return jshero.testutil.assert_functionReturns("sort([1, 3, 2])",[1,2,3])},function(){return jshero.testutil.assert_functionReturns("sort([2, 1, 3])",[1,2,3])},function(){return jshero.testutil.assert_functionReturns("sort([2, 3, 1])",[1,2,3])},function(){return jshero.testutil.assert_functionReturns("sort([3, 1, 2])",[1,2,3])},function(){return jshero.testutil.assert_functionReturns("sort([3, 2, 1])",[1,2,3])}]});
jshero.koans.add({id:"bool",title:"Boolean",lesson:"Another important data type next to String and Number is Boolean. It has only two possible values:\n<code>true</code> and <code>false</code>. You can calculate with Boolean values similar to numbers. JavaScript\nhas three Boolean operators: <code>&&</code> (and), <code>||</code> (or) and <code>!</code> (not).\n<code>&&</code> links two Boolean values. If both values are <code>true</code>, the result is <code>true</code>.\nIn all other cases it is <code>false</code>. With <code>||</code> the result is <code>true</code>,\nif at least one of the two input values is <code>true</code>. If both input values are <code>false</code>,\nthe result is <code>false</code>. <code>!</code> is applied to a single Boolean value and inverts this value:\n<code>!true</code> is <code>false</code> and <code>!false</code> is <code>true</code>.\n\n<pre><code>let x1 = true && false;\nlet x2 = !x1;\nlet x3 = x1 || x2;</code></pre>\n\n<code>x1</code> is <code>false</code>, <code>x2</code> is <code>true</code> and <code>x3</code> is <code>true</code>.",task:"Write a function <code>nand</code> that takes two Boolean values. If both values are <code>true</code>,\nthe result should be <code>false</code>. In the other cases the return should be <code>true</code>.<br><br>\nI.e.: The call <code>nand(true,&nbsp;true)</code> should return <code>false</code>. The calls\n<code>nand(true,&nbsp;false)</code>, <code>nand(false,&nbsp;true)</code> and <code>nand(false,&nbsp;false)</code>\nshould return <code>true</code>.",hint:"<pre><code>function nand(a, b) {\n  let and = a && b;\n  ...\n}</code></pre>",solution:"<pre><code>function nand(a, b) {\n  let and = a && b;\n  return !and;\n}</code></pre>",tests:[function(){return jshero.testutil.assert_isFunction("nand")},function(){return jshero.testutil.assert_functionHasNumOfParameter("nand",2)},function(){return jshero.testutil.assert_functionReturns("nand(true, true)",false)},function(){return jshero.testutil.assert_functionReturns("nand(true, false)",true)},function(){return jshero.testutil.assert_functionReturns("nand(false, true)",true)},function(){return jshero.testutil.assert_functionReturns("nand(false, false)",true)}]});
jshero.koans.add({id:"break",title:"break and continue",lesson:"<code>break</code> terminates the current loop. The program continues after the loop.\n\n<pre><code>let words = 'blue white red';\nlet indexFirstSpace = -1;\nfor (let i = 0; i < words.length; i++) {\n  if (words.charAt(i) === ' ') {\n    indexFirstSpace = i;\n    break;\n  }\n}</code></pre>\n\nIf the character with the index <code>i</code> in <code>words</code> is a space, the <code>if</code> condition is fulfilled.\n<code>indexFirstSpace</code> gets the value of the loop variable <code>i</code>. Now, <code>break</code> will be\nexecuted. The loop will be terminated and the program execution continues after the loop.<br><br>\n\n<code>continue</code> terminates the current loop iteration. The program execution jumps to the loop head.\n\n<pre><code>let sum = 0;\nfor (let i = 0; i < 10; i++) {\n  if (i % 2 === 0) {\n    continue;\n  }\n  sum = sum + i;\n}</code></pre>\n\nIf <code>i</code> is an odd number, the following applies: i modulo 2 = 1. The <code>if</code> condition is not fulfilled.\nCode execution continues after <code>if</code> and <code>i</code> is added to <code>sum</code>.\nIf <code>i</code> is an even number, the following applies: i modulo 2 = 0. The <code>if</code> condition is fulfilled and\n<code>continue</code> will be excecuted. The code execution jumps directly to the loop head.\n<code>i</code> is not added to <code>sum</code>. So all odd numbers smaller than 10 are added up.<br><br>\n\n<code>break</code> and <code>continue</code> can be used in all loops (for, while, do...while).",task:"Write a function <code>isPrime</code> that checks whether a passed number is\n<a href=\"https://en.wikipedia.org/wiki/Prime_number\">prime</a>.\nIn case of a prime number it should return <code>true</code>, otherwise <code>false</code>.<br><br>\nExample: <code>isPrime(7)</code> should return <code>true</code> and <code>isPrime(8)</code> should return\n<code>false</code>.",tests:[function(){return jshero.testutil.assert_isFunction("isPrime")},function(){return jshero.testutil.assert_functionHasNumOfParameter("isPrime",1)},function(){return jshero.testutil.assert_functionReturns("isPrime(1)",false)},function(){return jshero.testutil.assert_functionReturns("isPrime(2)",true)},function(){return jshero.testutil.assert_functionReturns("isPrime(3)",true)},function(){return jshero.testutil.assert_functionReturns("isPrime(4)",false)},function(){return jshero.testutil.assert_functionReturns("isPrime(11)",true)},function(){return jshero.testutil.assert_functionReturns("isPrime(281)",true)},function(){return jshero.testutil.assert_functionReturns("isPrime(351)",false)}]});
jshero.koans.add({id:"comment",title:"Comments",lesson:"If needed, you can add comments to a program. Comments are used to explain programs.\nThey help us humans to understand programs. Computers ignore comments.<br><br>\nIn JavaScript there are two ways to write comments:\nLine comments are introduced with <code>//</code> and are valid until the end of the line.\nBlock comments start with <code>/*</code> and end with <code>*/</code>.\nAny text in between is a comment.\n\n<pre><code>// That's a line comment.\n\n// This line comment\n// covers 2 lines.\n\n/* That's a block comment. */\n\n/* This block comment\ncovers 2 lines. */\n\n/**\n * This is also a block comment.\n * The additional stars between\n * the beginning and the end of the\n * block comment are only for decoration.\n */</code></pre>\n\n Block comments are often used to explain functions. Line comments explain the code flow.\n\n <pre><code>/**\n * Checks whether a string contains\n * any characters other than spaces.\n */\nfunction isBlank(string) {\n  // The method trim() removes spaces at\n  // the beginning and the end of a string.\n  let trimmedString = string.trim();\n  return trimmedString.length === 0;\n}</code></pre>\n\nComments can't be checked with the tests used here.\nIt follows a task where you have to apply much of what you have learned so far.",task:"Write a function <code>median</code> that takes an array of ascending numbers and returns the\n<a href='https://en.wikipedia.org/wiki/Median'>median</a> of that numbers.<br><br>\nExample: <code>median([1, 2, 10])</code> should return <code>2</code> and <code>median([1, 2, 10, 100])</code> should return\n<code>6</code>.",hint:"The median of a sorted series of numbers is the value in the middle.\nIf the number of values is even, the median is the mean of the two middle numbers.",solution:"<pre><code>function median(nums) {\n  let len = nums.length;\n  if (len % 2 === 0) {\n    return (nums[len / 2] + nums[(len / 2) - 1]) / 2;\n  } else {\n    return nums[(len - 1) / 2];\n  }\n}</code></pre>",tests:[function(){return jshero.testutil.assert_isFunction("median")},function(){return jshero.testutil.assert_functionHasNumOfParameter("median",1)},function(){return jshero.testutil.assert_functionReturns("median([1])",1)},function(){return jshero.testutil.assert_functionReturns("median([1, 2])",1.5)},function(){return jshero.testutil.assert_functionReturns("median([1, 2, 10])",2)},function(){return jshero.testutil.assert_functionReturns("median([1, 1, 2, 10, 100, 101])",6)}]});
jshero.koans.add({id:"concat",title:"Array: concat()",lesson:"Using the <code>concat</code> method you can concatenate two arrays:\n\n<pre><code>let a1 = [1, 2, 3];\nlet a2 = [4, 5, 6];\nlet a3 = a1.concat(a2);</code></pre>\n\n<code>a3</code> contains the array <code>[1, 2, 3, 4, 5, 6]</code>.\nThe two existing arrays <code>a1</code> and <code>a2</code> will not be changed.",task:"Write a function <code>concatUp</code> that concatenate two arrays.\nThe longer array should be appended to the shorter array.\nIf both arrays are equally long, the second array should be appended to the first array.<br><br>\nExample: <code>concatUp([1,&nbsp;2],&nbsp;[3])</code> should return <code>[3,&nbsp;1,&nbsp;2]</code>\nand <code>concatUp([5,&nbsp;7],&nbsp;[6,&nbsp;8])</code> should return <code>[5,&nbsp;7,&nbsp;6,&nbsp;8]</code>.",hint:"<pre><code>function concatUp(firstArray, secondArray) {\n  // Use if to decide in which order the\n  // two arrays should be concatenated.\n}</code></pre>",solution:"<pre><code>function concatUp(firstArray, secondArray) {\n\n  if (secondArray.length >= firstArray.length) {\n    return firstArray.concat(secondArray);\n  }\n\n  return secondArray.concat(firstArray);\n}</code></pre>",tests:[function(){return jshero.testutil.assert_isFunction("concatUp")},function(){return jshero.testutil.assert_functionHasNumOfParameter("concatUp",2)},function(){return jshero.testutil.assert_functionReturns("concatUp([5, 7], [6])",[6,5,7])},function(){return jshero.testutil.assert_functionReturns("concatUp(['x'], ['a', 'b'])",["x","a","b"])},function(){return jshero.testutil.assert_functionReturns("concatUp([5, 7], [6, 8])",[5,7,6,8])}]});
(function(testutil){jshero.koans.add({id:"dimarray",title:"Array of arrays",lesson:"So far we have stored numbers, strings and boolean values in arrays.\nBut you can also store arrays in arrays:\n\n<pre><code>let teams = [\n  ['Ruby', 'Angel'],\n  ['Mia', 'Yui', 'Merve', 'Elif'],\n  ['Saanvi', 'Giulia', 'Zeynep']\n];\n\nlet row1 = [4, 9, 2];\nlet row2 = [3, 5, 7];\nlet row3 = [8, 1, 6];\nlet loshu = [row1, row2, row3];</code></pre>\n\nIn the first example, 3 teams are stored in an array. Each team itself is an array of names.\nThe individual teams have different sizes. With <pre><code>let team = teams[0];</code></pre> you can access a team and\nwith <pre><code>let member = teams[0][0];</code></pre> you can access an individual team member.<br><br>\nArrays that contain arrays are also called two-dimensional arrays.\nCarrying this on, you get three- or multidimensional arrays.<br><br>\nIn the second example, the <a href='https://en.wikipedia.org/wiki/Lo_Shu_Square'>Lo Shu Square</a>\nis stored in a two-dimensional array.",task:"Write a function <code>flat</code> that flattens a two-dimensional array with 3 entries.<br><br>\nExample: <code>flat(loshu)</code> should return <code>[4, 9, 2, 3, 5, 7, 8, 1, 6]</code>.\nThereby <code>loshu</code> is the magic square from the example above.",hint:"Use the array method <code>concat()</code>.",solution:"<pre><code>function flat(arr){\n  return arr[0].concat(arr[1]).concat(arr[2]);\n}</code></pre>",tests:[function(){return testutil.assert_isFunction("flat")},function(){return testutil.assert_functionHasNumOfParameter("flat",1)},function(){return testutil.assert_functionReturns("flat([[], [], []])",[])},function(){return testutil.assert_functionReturns("flat([[1], [], []])",[1])},function(){return testutil.assert_functionReturns("flat([[1], [2], [3]])",[1,2,3])},function(){return testutil.assert_functionReturns("flat([[1, 2], [3, 4], [5, 6]])",[1,2,3,4,5,6])},function(){return testutil.assert_functionReturns("flat([['a'], ['b', 'c'], ['d', 'e', 'f']])",["a","b","c","d","e","f"])}]})})(jshero.testutil);
jshero.koans.add({id:"doubleloop",title:"Nested loops",lesson:"Loops can be nested into each other. In case of a <code>for</code> loop you have to use two different\nloop variables.\n\n<pre><code>let a = [[1, 7, 3], [2, 8, 5], [9, 0, 4]];\nlet sum = 0;\nfor (let i = 0; i < 3; i++) {\n  for (let j = 0; j < 3; j++) {\n    sum = sum + a[i][j];\n  }\n}</code></pre>\n\nThe code snippet calculates the sum of all elements of a two-dimensional array.",task:"Write a function <code>sum</code> that calculates the sum of all elements of a two-dimensional array.<br><br>\nExample: <code>sum([[1, 2], [3]])</code> should return <code>6</code>.",tests:[function(){return jshero.testutil.assert_isFunction("sum")},function(){return jshero.testutil.assert_functionHasNumOfParameter("sum",1)},function(){return jshero.testutil.assert_functionReturns("sum([[1]])",1)},function(){return jshero.testutil.assert_functionReturns("sum([[1, 2], [3]])",6)},function(){return jshero.testutil.assert_functionReturns("sum([[1, 2, 3], [1, 2], [1, 2, 3, 4]])",19)}]});
jshero.koans.add({id:"dowhile",title:"do...while loop",lesson:"The <code>do...while</code> loop works similarly to the <code>while</code> loop.\nThe loop code is executed as long as the loop condition results in <code>true</code>.\nThe only difference is that the loop condition is checked after the loop code.\nThis ensures that the loop code is run through at least once.\n\n<pre><code>let threeX = '';\ndo {\n  threeX = threeX + 'x';\n} while (threeX.length < 3);</code></pre>\n\nAfter the loop <code>threeX</code> has the value <code>'xxx'</code>.",task:"Write a function <code>lcm</code> that takes two natural numbers and calculates their\n<a href='https://en.wikipedia.org/wiki/Least_common_multiple'>least common multiple (lcm)</a>.\nThe lcm of two natural numbers a und b is the smallest natural number that is divisible by a and b.<br><br>\nExample: <code>lcm(4, 6)</code> should return <code>12</code>.",hint:"To calculate the lcm of a and b, take <code>1</code> and test whether it is divisible by a and b.\nIf so, <code>1</code> is the lcm. If not, take <code>2</code> and test again. And so forth.",solution:"<pre><code>function lcm(a, b) {\n\n  let theLCM = 0;\n  let remainderA;\n  let remainderB;\n\n  do {\n\n    theLCM++;\n    remainderA = theLCM % a;\n    remainderB = theLCM % b;\n\n  } while (remainderA !== 0 || remainderB !== 0)\n\n  return theLCM;\n}</code></pre>",tests:[function(){return jshero.testutil.assert_isFunction("lcm")},function(){return jshero.testutil.assert_functionHasNumOfParameter("lcm",2)},function(){return jshero.testutil.assert_functionReturns("lcm(1, 1)",1)},function(){return jshero.testutil.assert_functionReturns("lcm(1, 2)",2)},function(){return jshero.testutil.assert_functionReturns("lcm(2, 3)",6)},function(){return jshero.testutil.assert_functionReturns("lcm(3, 2)",6)},function(){return jshero.testutil.assert_functionReturns("lcm(4, 6)",12)},function(){return jshero.testutil.assert_functionReturns("lcm(5, 7)",35)},function(){return jshero.testutil.assert_functionReturns("lcm(6, 8)",24)},function(){return jshero.testutil.assert_functionReturns("lcm(10, 20)",20)},function(){return jshero.testutil.assert_functionReturns("lcm(20, 10)",20)}]});
jshero.koans.add({id:"else",title:"if...else",lesson:"If a code block should be executed if an <code>if</code> condition\nis not fulfilled, an <code>else</code> is added.\n\n<pre><code>let message;\nif (amount > 1000) {\n  message = 'No payout possible!';\n} else {\n  message = 'The amount will be paid out!';\n}</code></pre>\n\nDepending on whether <code>amount</code> is greater or smaller <code>1000</code>,\neither the <code>if</code> branch or the <code>else</code> branch is executed.",task:"Write a function <code>addWithSurcharge</code> that adds two amounts with surcharge.\nFor each amount less than or equal to <code>10</code>, the surcharge is <code>1</code>.\nFor each amount greater than <code>10</code>, the surcharge is <code>2</code>.<br><br>\nExample: <code>addWithSurcharge(5,&nbsp;15)</code> should return <code>23</code>.",hint:"<pre><code>function addWithSurcharge(a, b) {\n\n  let surcharge = 0;\n\n  if (a <= 10) {\n    surcharge = surcharge + 1;\n  } else ...\n\n  ...\n\n  return a + b + surcharge;\n}</code></pre>",solution:"<pre><code>function addWithSurcharge(a, b) {\n\n  let surcharge = 0;\n\n  if (a <= 10) {\n    surcharge = surcharge + 1;\n  } else {\n    surcharge = surcharge + 2;\n  }\n\n  if (b <= 10) {\n    surcharge = surcharge + 1;\n  } else {\n    surcharge = surcharge + 2;\n  }\n\n  return a + b + surcharge;\n}</code></pre>",tests:[function(){return jshero.testutil.assert_isFunction("addWithSurcharge")},function(){return jshero.testutil.assert_functionHasNumOfParameter("addWithSurcharge",2)},function(){return jshero.testutil.assert_functionReturns("addWithSurcharge(1, 1)",4)},function(){return jshero.testutil.assert_functionReturns("addWithSurcharge(10, 10)",22)},function(){return jshero.testutil.assert_functionReturns("addWithSurcharge(11, 10)",24)},function(){return jshero.testutil.assert_functionReturns("addWithSurcharge(10, 11)",24)},function(){return jshero.testutil.assert_functionReturns("addWithSurcharge(11, 11)",26)},function(){return jshero.testutil.assert_functionReturns("addWithSurcharge(15, 27)",46)}]});
jshero.koans.add({id:"elseif",title:"else if",lesson:"If you want to distinguish multiple cases, you can supplement an <code>if</code> with any number of\n<code>else if</code>. Finally, a single <code>else</code> can be added.\n\n<pre><code>let message;\nif (amount > 1000) {\n  message = 'Too high. No payout possible!';\n} else if (amount < 10) {\n  message = 'Too low. No payout possible!';\n} else {\n  message = 'The amount will be paid out!';\n}</code></pre>\n\nFirst it is checked whether <code>amount</code> is greater than <code>1000</code>.\nIf so, the 'Too high ...' message is set and the code will be continued at the end of the entire block.\nIf not, it is checked whether <code>amount</code> is less than <code>10</code>.\nIf so, the 'Too low ...' message is set and the code will be continued at the end of the entire block.\nIf no condition is met, the final <code>else</code> block is executed.",task:"Write a function <code>addWithSurcharge</code> that adds two amounts with surcharge.\nFor each amount less than or equal to <code>10</code>, the surcharge is <code>1</code>.\nFor each amount greater than <code>10</code> and less than or equal to <code>20</code>, the surcharge is <code>2</code>.\nFor each amount greater than <code>20</code>, the surcharge is <code>3</code>.<br><br>\nExample: <code>addWithSurcharge(10,&nbsp;30)</code> should return <code>44</code>.",tests:[function(){return jshero.testutil.assert_isFunction("addWithSurcharge")},function(){return jshero.testutil.assert_functionHasNumOfParameter("addWithSurcharge",2)},function(){return jshero.testutil.assert_functionReturns("addWithSurcharge(1, 1)",4)},function(){return jshero.testutil.assert_functionReturns("addWithSurcharge(10, 10)",22)},function(){return jshero.testutil.assert_functionReturns("addWithSurcharge(11, 10)",24)},function(){return jshero.testutil.assert_functionReturns("addWithSurcharge(10, 11)",24)},function(){return jshero.testutil.assert_functionReturns("addWithSurcharge(11, 11)",26)},function(){return jshero.testutil.assert_functionReturns("addWithSurcharge(10, 20)",33)},function(){return jshero.testutil.assert_functionReturns("addWithSurcharge(20, 10)",33)},function(){return jshero.testutil.assert_functionReturns("addWithSurcharge(10, 21)",35)},function(){return jshero.testutil.assert_functionReturns("addWithSurcharge(21, 10)",35)},function(){return jshero.testutil.assert_functionReturns("addWithSurcharge(11, 20)",35)},function(){return jshero.testutil.assert_functionReturns("addWithSurcharge(20, 11)",35)},function(){return jshero.testutil.assert_functionReturns("addWithSurcharge(11, 21)",37)},function(){return jshero.testutil.assert_functionReturns("addWithSurcharge(21, 11)",37)},function(){return jshero.testutil.assert_functionReturns("addWithSurcharge(20, 20)",44)},function(){return jshero.testutil.assert_functionReturns("addWithSurcharge(21, 20)",46)},function(){return jshero.testutil.assert_functionReturns("addWithSurcharge(20, 21)",46)},function(){return jshero.testutil.assert_functionReturns("addWithSurcharge(21, 21)",48)}]});
jshero.koans.add({id:"equals",title:"Strict equality",lesson:"Two values can be checked for strict equality. The result of such a comparison is either <code>true</code>,\nthe two values are equal, or <code>false</code>, the two values are not equal. The operator for strict equality\nis&nbsp;<code>===</code>.\n\n<pre><code>let language = 'JavaScript';\nlet x = 10;\nlet c1 = language === 'Java';\nlet c2 = x === 10;\nlet c3 = x === '10';</code></pre>\n\nThe first comparison results in <code>false</code>, because <code>language</code> does not have the value\n<code>'Java'</code>. So <code>c1</code> is <code>false</code>. The second comparison results in <code>true</code>,\nbecause the value of <code>x</code> equals <code>10</code>. So <code>c2</code> is <code>true</code>.\nIn the case of strict equality, it is also important that the two compared values have the same data type.\n<code>c3</code> is <code>false</code>, because different data types are compared here.\nOn the left side of the comparison is a number, on the right side a string.",task:"Write a function <code>equals</code> that checks two values for strict equality.<br><br>\nExample: <code>equals(1,&nbsp;1)</code> should return <code>true</code> and <code>equals(1,&nbsp;2)</code> should\nreturn <code>false</code>.",hint:"<pre><code>function equals(a, b) {\n  return ...\n}</code></pre>",solution:"<pre><code>function equals(a, b) {\n  return a === b;\n}</code></pre>",tests:[function(){return jshero.testutil.assert_isFunction("equals")},function(){return jshero.testutil.assert_functionHasNumOfParameter("equals",2)},function(){return jshero.testutil.assert_functionReturns("equals(1, 1)",true)},function(){return jshero.testutil.assert_functionReturns("equals(1, '1')",false)},function(){return jshero.testutil.assert_functionReturns("equals(1, 2)",false)},function(){return jshero.testutil.assert_functionReturns("equals('sun', 'sun')",true)},function(){return jshero.testutil.assert_functionReturns("equals('left', 'right')",false)}]});
jshero.koans.add({id:"equals2",title:"Three identical values",lesson:"The following task can be solved by an interaction of strict equality and a Boolean operator.",task:"Write a function <code>equals</code> that checks 3 values for strict equality.\nThe function should only return <code>true</code> if all 3 values are equal.<br><br>\nExample: <code>equals(1,&nbsp;1,&nbsp;1)</code> should return <code>true</code> and\n<code>equals(1,&nbsp;2,&nbsp;1)</code> should return <code>false</code>.",hint:"<pre><code>function equals(a, b, c) {\n  // Compare a with b and a with c.\n  // Connect the result of both comparisons with &&.\n}</code></pre>",solution:"<pre><code>function equals(a, b, c) {\n  return a === b && a === c;\n}</code></pre>",tests:[function(){return jshero.testutil.assert_isFunction("equals")},function(){return jshero.testutil.assert_functionHasNumOfParameter("equals",3)},function(){return jshero.testutil.assert_functionReturns("equals(1, 1, 1)",true)},function(){return jshero.testutil.assert_functionReturns("equals('1', 1, 1)",false)},function(){return jshero.testutil.assert_functionReturns("equals(1, '1', 1)",false)},function(){return jshero.testutil.assert_functionReturns("equals(1, 1, '1')",false)},function(){return jshero.testutil.assert_functionReturns("equals('A', 'B', 'C')",false)}]});
(function(testutil){jshero.koans.add({id:"euler1",title:"Project Euler",lesson:"The following task is taken from <a href='https://projecteuler.net'>Project Euler</a>.\nIt's the first task there. Project Euler is a series of challenging mathematical and computer programming problems.",task:"Write a function <code>sumMultiples</code> taking a natural number n and returning the sum of all\nmultiples of 3 and of 5 that are truly less than n.<br><br>\nExample: All multiples of 3 and 5 less than 20 are 3, 5, 6, 9, 10, 12, 15 and 18. Their sum is 78.\n<code>sumMultiples(20)</code> should return <code>78</code>.",tests:[function(){return testutil.assert_isFunction("sumMultiples")},function(){return testutil.assert_functionHasNumOfParameter("sumMultiples",1)},function(){return testutil.assert_functionReturns("sumMultiples(1)",0)},function(){return testutil.assert_functionReturns("sumMultiples(2)",0)},function(){return testutil.assert_functionReturns("sumMultiples(3)",0)},function(){return testutil.assert_functionReturns("sumMultiples(4)",3)},function(){return testutil.assert_functionReturns("sumMultiples(5)",3)},function(){return testutil.assert_functionReturns("sumMultiples(6)",8)},function(){return testutil.assert_functionReturns("sumMultiples(7)",14)},function(){return testutil.assert_functionReturns("sumMultiples(8)",14)},function(){return testutil.assert_functionReturns("sumMultiples(9)",14)},function(){return testutil.assert_functionReturns("sumMultiples(10)",23)},function(){return testutil.assert_functionReturns("sumMultiples(11)",33)},function(){return testutil.assert_functionReturns("sumMultiples(16)",60)},function(){return testutil.assert_functionReturns("sumMultiples(20)",78)},function(){return testutil.assert_functionReturns("sumMultiples(100)",2318)},function(){return testutil.assert_functionReturns("sumMultiples(500)",57918)},function(){return testutil.assert_functionReturns("sumMultiples(1000)",233168)}]})})(jshero.testutil);
jshero.koans.add({id:"even",title:"Even numbers",lesson:"The following task can be solved by an interaction of strict equality and the modulo operator.",task:"Write a function <code>isEven</code> that checks if a passed number is even.\nIf the given number is even, <code>true</code> should be returned, otherwise <code>false</code>.<br><br>\nExample: <code>isEven(2)</code> should return <code>true</code> and <code>isEven(3)</code> should\nreturn <code>false</code>.",solution:"<pre><code>function isEven(num) {\n  return num % 2 === 0;\n}</code></pre>",tests:[function(){return jshero.testutil.assert_isFunction("isEven")},function(){return jshero.testutil.assert_functionHasNumOfParameter("isEven",1)},function(){return jshero.testutil.assert_functionReturns("isEven(0)",true)},function(){return jshero.testutil.assert_functionReturns("isEven(1)",false)},function(){return jshero.testutil.assert_functionReturns("isEven(2)",true)},function(){return jshero.testutil.assert_functionReturns("isEven(37)",false)},function(){return jshero.testutil.assert_functionReturns("isEven(208)",true)}]});
(function(testutil){jshero.koans.add({id:"factorial",title:"Factorial",lesson:"Let us practice the <code>for</code> loop with the\n<a href='https://en.wikipedia.org/wiki/Factorial'>factorial</a> used in mathematics.\nThe factorial of a positive integer n, denoted by n!, is the product of all positive integers less than or equal to n.\nFor example, 3! = 1*2*3 = 6. By definition, 0! = 1.",task:"Write a function <code>factorial</code> that calculates the factorial of a positive integer.<br><br>\nExample: <code>factorial(3)</code> should return <code>6</code>.",hint:"<pre><code>function factorial(n) {\n  let result = 1;\n  for (...) {\n    ...\n  }\n  return result;\n}</pre></code>",solution:"<pre><code>function factorial(n) {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result = result * i;\n  }\n  return result;\n}</pre></code>",tests:[function(){return testutil.assert_isFunction("factorial")},function(){return testutil.assert_functionHasNumOfParameter("factorial",1)},function(){return testutil.assert_functionReturns("factorial(0)",1)},function(){return testutil.assert_functionReturns("factorial(1)",1)},function(){return testutil.assert_functionReturns("factorial(2)",2)},function(){return testutil.assert_functionReturns("factorial(3)",6)},function(){return testutil.assert_functionReturns("factorial(4)",24)},function(){return testutil.assert_functionReturns("factorial(9)",362880)}]})})(jshero.testutil);
jshero.koans.add({id:"fahrenheit",title:"Fahrenheit",lesson:"The following task is taken from the <a href='https://www.freecodecamp.org'>freeCodeCamp</a>.",task:"Write a function <code>toFahrenheit</code> that converts a temperature from <a href='https://en.wikipedia.org/wiki/Celsius'>Celsius</a>\nto <a href='https://en.wikipedia.org/wiki/Fahrenheit'>Fahrenheit</a>.<br><br>\nExample: <code>toFahrenheit(0)</code> should return <code>32</code>.",hint:"If C is the temperature in Celsius and F the temperature in Fahrenheit, the following applies: F = 1.8 * C + 32.",solution:"<pre><code>function toFahrenheit(celsius) {\n  return 1.8 * celsius + 32;\n}</code></pre>",tests:[function(){return jshero.testutil.assert_isFunction("toFahrenheit")},function(){return jshero.testutil.assert_functionHasNumOfParameter("toFahrenheit",1)},function(){return jshero.testutil.assert_functionReturns("toFahrenheit(0)",32)},function(){return jshero.testutil.assert_functionReturns("toFahrenheit(10)",50)},function(){return jshero.testutil.assert_functionReturns("toFahrenheit(40)",104)},function(){return jshero.testutil.assert_functionReturns("toFahrenheit(100)",212)}]});
(function(testutil){jshero.koans.add({id:"for1",title:"for loop",lesson:"Loops can execute code blocks several times. JavaScript knows different kinds of loops. The simplest one is\nthe <code>for</code> loop.\n\n<pre><code>let sum = 0;\nfor (let i = 1; i < 3; i++) {\n  sum = sum + i;\n}</code></pre>\n\nThe <code>for</code> loop consists of three control expressions and the loop code.\nThe three control expressions follow the <code>for</code> keyword in parentheses.\nThey are separated by semicolons. The first expression is the start expression. It is executed once at the beginning\nof the loop. The so-called loop variable is normally initialized here. The second expression is the loop condition.\nIt is evaluated to <code>true</code> or <code>false</code> before each loop iteration. If this expression evaluates\nto <code>true</code>, the loop code is executed. If this expression evaluates to <code>false</code>, the loop is\nterminated and the program execution continues after the loop. The third expression, called the final expression,\nis executed after each loop iteration. The loop variable is normally increased here. Then a new loop iteration is\nstarted with a new evaluation of the loop condition. The loop code follows the three control expressions in brackets.\nIn our example <code>sum</code> has the value <code>0</code> initially. In the start expression <code>i</code> is\ninitialized with <code>1</code>. The loop condition <code>1 < 3</code> is fulfilled, so the loop code is executed.\n<code>sum</code> receives the value <code>0 + 1</code>, i. e. <code>1</code>. Now in the final expression\n<code>i</code> is increased by <code>1</code>. (<code>i++</code> is identical to <code>i = i + 1</code>).\n<code>i</code> thus receives the value <code>2</code>. The second loop starts with the evaluation of the loop condition.\nThis condition (<code>2 < 3</code>) is still fulfilled.\nThe loop code is executed again and <code>sum</code> is now given the value <code>1 + 2</code>, that is <code>3</code>.\nIn the final expression <code>i</code> is increased again and gets the value <code>3</code>.\nThe loop condition <code>3 < 3</code> is no longer fulfilled. The loop is terminated and the program execution continues\nafter the loop. Our code example has added all natural numbers smaller than 3.",task:"Write a function <code>addTo</code> that accepts a number as a parameter and adds all natural numbers\nsmaller or equal than the parameter. The result is to be returned.<br><br>\nExample: <code>addTo(3)</code> should return <code>1+2+3</code> = <code>6</code>.",hint:"<pre><code>function addTo(n) {\n  let sum = 0;\n  for (let i = 0; i <= n; i++) {\n    ...\n  }\n  return sum;\n}</pre></code>",solution:"<pre><code>function addTo(n) {\n  let sum = 0;\n  for (let i = 0; i <= n; i++) {\n    sum = sum + i;\n  }\n  return sum;\n}</pre></code>",tests:[function(){return testutil.assert_isFunction("addTo")},function(){return testutil.assert_functionHasNumOfParameter("addTo",1)},function(){return testutil.assert_functionReturns("addTo(0)",0)},function(){return testutil.assert_functionReturns("addTo(1)",1)},function(){return testutil.assert_functionReturns("addTo(2)",3)},function(){return testutil.assert_functionReturns("addTo(3)",6)},function(){return testutil.assert_functionReturns("addTo(9)",45)}]})})(jshero.testutil);
jshero.koans.add({id:"for2",title:"Loops and arrays",lesson:"<code>for</code> loops are handy for traversing arrays.\nIn the following example, the elements of an array are added together:\n\n<pre><code>let sum = 0;\nfor (let i = 0; i < myArray.length; i++) {\n  sum = sum + myArray[i];\n}</code></pre>",task:"Write a function <code>mean</code> that accepts an array filled with numbers\nand returns the arithmetic mean of those numbers.<br><br>\nExample: <code>mean([1, 2, 3])</code> should return <code>(1+2+3)/3</code> = <code>2</code>.",hint:"To calculate the mean of n numbers, you have to add up the numbers and divide the obtained sum by n.",solution:"<pre><code>function mean(data) {\n\n  let sum = 0;\n\n  for (let i = 0; i < data.length; i ++) {\n    sum = sum + data[i];\n  }\n\n  return sum / data.length;\n};</code></pre>",tests:[function(){return jshero.testutil.assert_isFunction("mean")},function(){return jshero.testutil.assert_functionHasNumOfParameter("mean",1)},function(){return jshero.testutil.assert_functionReturns("mean([0])",0)},function(){return jshero.testutil.assert_functionReturns("mean([1, 2])",1.5)},function(){return jshero.testutil.assert_functionReturns("mean([1, 2, 3])",2)},function(){return jshero.testutil.assert_functionReturns("mean([-2, -4, 17, 34])",11.25)}]});
jshero.koans.add({id:"function",title:"Functions",lesson:"A function is a block of statements that can be executed as often as you like.\nA function can have parameters and can return a value. Functions can be defined in different ways.\nPerhaps the most common one is the function declaration. It starts with the keyword <code>function</code>.\nIt follows:\n<ul><li>the name of the function,</li>\n<li>the parameters enclosed in round parentheses,</li>\n<li>the statements enclosed in curly brackets.</li></ul>\nWith the keyword <code>return</code> a value can be returned. At the same time <code>return</code> terminates the function.\nStatements after a <code>return</code> will not be executed. With\n\n<pre><code>function color() {\n  return 'red';\n}</code></pre>\n\nwe define a function that returns the value <code>'red'</code>. The function has no parameters (the parentheses are empty)\nand contains only the return statement. The function is assigned to the variable <code>color</code>.\nThe function is called by its name:\n\n<pre><code>let result = color();</code></pre>\n\nNow the function is executed. Its return is assigned to the variable <code>result</code>. <code>result</code> therefore\nhas the value <code>'red'</code>.",task:"Define a function <code>hello</code> that returns <code>'Hello world!'</code>.",hint:"<pre><code>function hello() {\n  ...\n}</code></pre>",solution:"<pre><code>function hello() {\n  return 'Hello world!';\n}</code></pre>",tests:[function(){return jshero.testutil.assert_isFunction("hello")},function(){return jshero.testutil.assert_functionReturns("hello()","Hello world!")}]});
jshero.koans.add({id:"function2",title:"Multiple functions",lesson:"Now we define more then one function.\nAs a reminder: A function with name <code>color</code> returning the value\n<code>'red'</code> is defined as followed:\n\n<pre><code>function color() {\n  return 'red';\n}</code></pre>",task:"Define two functions. The first function <code>a</code> should return\n<code>'Hello a!'</code> and the second function <code>b</code> should return\n<code>'Hello b!'</code>.",hint:"<pre><code>function a() {\n  return ...\n}\n\nfunction b() {\n  return ...\n}</code></pre>",solution:"<pre><code>function a() {\n  return 'Hello a!';\n}\n\nfunction b() {\n  return 'Hello b!';\n}</code></pre>",tests:[function(){return jshero.testutil.assert_isFunction("a")},function(){return jshero.testutil.assert_isFunction("b")},function(){return jshero.testutil.assert_functionReturns("a()","Hello a!")},function(){return jshero.testutil.assert_functionReturns("b()","Hello b!")}]});
jshero.koans.add({id:"functioncall",title:"Function calls",lesson:"The difference between the definition and the call of a function is important.\nThe following definition of a function\n\n<pre><code>function f() {\n  return 'hello';\n}</code></pre>\n\nsays what the function will do: Return 'hello', if called. The function will not be executed, but only provided.\nOnly with its call\n\n<pre><code>let x = f();</code></pre>\n\nthe function is executed. Every instruction in the function block is executed in order.\nThe result of the function in the example above will be assigned to the variable <code>x</code>.\nTo define a function use the keyword <code>function</code>.\nIf the function is assigned to a variable, the function is called via this variable.\nFunctions are defined once so that they can be used multiple times at different program points by calling them.",task:"1. Define a function <code>greet</code> returning the value <code>'Haydo!'</code>.<br/>\n2. Declare a variable <code>salutation</code>. Call the function <code>greet</code> and assign the\nresult of the call to the variable <code>salutation</code>.",hint:"<pre><code>function greet() {\n  ...\n}\n\nlet salutation = ...</code></pre>",solution:"<pre><code>function greet() {\n  return 'Haydo!';\n}\n\nlet salutation = greet();</code></pre>",tests:[function(){return jshero.testutil.assert_isFunction("greet")},function(){return jshero.testutil.assert_functionReturns("greet()","Haydo!")},function(){return jshero.testutil.assert_variableDefined("salutation")},function(){return jshero.testutil.assert_variableHasValue("salutation","Haydo!")}]});
jshero.koans.add({id:"further",title:"To be continued ...",lesson:"JS Hero will be continued. Here's one last exercise.",task:"Write a function <code>digitsum</code> that calculates the digit sum of an integer.\nThe digit sum of an integer is the sum of all its digits.<br><br>\nExample: <code>digitsum(192)</code> should return <code>12</code>.",tests:[function(){return jshero.testutil.assert_isFunction("digitsum")},function(){return jshero.testutil.assert_functionHasNumOfParameter("digitsum",1)},function(){return jshero.testutil.assert_functionReturns("digitsum(1)",1)},function(){return jshero.testutil.assert_functionReturns("digitsum(192)",12)},function(){return jshero.testutil.assert_functionReturns("digitsum(1234567890)",45)}]});
jshero.koans.add({id:"ggt",title:"gcd",lesson:"The counterpart to the least common multiple is the\n<a href='https://en.wikipedia.org/wiki/Greatest_common_divisor'>greatest common divisor (gcd)</a>.\nThe greatest common divisor of two natural numbers a and b is the largest natural numbers that divides a and b.",task:"Write a function <code>gcd</code> that takes two natural numbers and calculates their gcd.<br><br>\n  Example: <code>gcd(6, 15)</code> should return <code>3</code>.",tests:[function(){return jshero.testutil.assert_isFunction("gcd")},function(){return jshero.testutil.assert_functionHasNumOfParameter("gcd",2)},function(){return jshero.testutil.assert_functionReturns("gcd(1, 1)",1)},function(){return jshero.testutil.assert_functionReturns("gcd(1, 2)",1)},function(){return jshero.testutil.assert_functionReturns("gcd(2, 3)",1)},function(){return jshero.testutil.assert_functionReturns("gcd(2, 4)",2)},function(){return jshero.testutil.assert_functionReturns("gcd(6, 15)",3)},function(){return jshero.testutil.assert_functionReturns("gcd(12, 18)",6)},function(){return jshero.testutil.assert_functionReturns("gcd(18, 12)",6)},function(){return jshero.testutil.assert_functionReturns("gcd(15, 45)",15)},function(){return jshero.testutil.assert_functionReturns("gcd(45, 15)",15)}]});
jshero.koans.add({id:"greaterthan",title:"Compare numbers",lesson:"Numbers can be compared with the well-known mathematical symbols.\nIn the following examples, all expressions return the value <code>true</code>.\n<pre><code>let v1 = 5 > 4;\nlet v2 = 5 >= 5;\nlet v3 = 5 < 6;\nlet v4 = 5 <= 5;</code></pre>",task:"Write a function <code>isThreeDigit</code> that checks if a number is greater than\nor equal to 100 and less than 1000.<br><br>\nExample: <code>isThreeDigit(500)</code> should return <code>true</code> and <code>isThreeDigit(50)</code>\nshould return <code>false</code>.",hint:"<pre><code>function isThreeDigit(x) {\n  return x >= 100 && ...\n}</code></pre>",solution:"<pre><code>function isThreeDigit(x) {\n  return x >= 100 && x < 1000;\n}</code></pre>",tests:[function(){return jshero.testutil.assert_isFunction("isThreeDigit")},function(){return jshero.testutil.assert_functionHasNumOfParameter("isThreeDigit",1)},function(){return jshero.testutil.assert_functionReturns("isThreeDigit(100)",true)},function(){return jshero.testutil.assert_functionReturns("isThreeDigit(999)",true)},function(){return jshero.testutil.assert_functionReturns("isThreeDigit(99)",false)},function(){return jshero.testutil.assert_functionReturns("isThreeDigit(1000)",false)}]});
jshero.koans.add({id:"if",title:"if",lesson:"Often code should only be executed if a certain condition is true.\nTo do this, use the <code>if</code> statement.\n\n<pre><code>let win = 0;\nif (dice === 6) {\n  win = 100;\n}</code></pre>\n\nThis statement consists of the keyword <code>if</code> followed by parentheses.\nThe parentheses contain an expression - the condition - that is evaluated to <code>true</code> or <code>false</code>.\nIf the condition results in <code>true</code>, all statements in the block delimited by the curly brackets will be executed.\nIf the condition results in <code>false</code>, the block bounded by the curly brackets will be skipped.\nIn our example, if <code>dice</code> has the value <code>6</code>, then <code>win</code> is set to <code>100</code>.\nIf <code>dice</code> does not have the value <code>6</code>, then <code>win</code> remains at <code>0</code>.",task:"Write a function <code>equals</code> that checks two values for strict equality.\nIf the two values are equal, the string <code>'EQUAL'</code> should be returned.\nIf they are unequal, you should get <code>'UNEQUAL'</code>.<br><br>\nExample: <code>equals(1,&nbsp;1)</code> should return <code>'EQUAL'</code> and\n<code>equals(1,&nbsp;2)</code> should return <code>'UNEQUAL'</code>.",hint:"<pre><code>function equals(a, b) {\n// Initialize a variable with 'UNEQUAL'.\n// Use 'if' to set the variable to 'EQUAL' if necessary.\n// Return the variable.\n}</code></pre>",solution:"<pre><code>function equals(a, b) {\n  let result = 'UNEQUAL';\n  if (a === b) {\n    result = 'EQUAL';\n  }\n  return result;\n}</code></pre>",tests:[function(){return jshero.testutil.assert_isFunction("equals")},function(){return jshero.testutil.assert_functionHasNumOfParameter("equals",2)},function(){return jshero.testutil.assert_functionReturns("equals(1, 1)","EQUAL")},function(){return jshero.testutil.assert_functionReturns("equals(1, 2)","UNEQUAL")},function(){return jshero.testutil.assert_functionReturns("equals(1, '1')","UNEQUAL")},function(){return jshero.testutil.assert_functionReturns("equals('JS', 'JS')","EQUAL")},function(){return jshero.testutil.assert_functionReturns("equals('left', 'right')","UNEQUAL")}]});
jshero.koans.add({id:"if2",title:"Two returns",lesson:"With <code>if</code> you can write functions with two return statements:\n\n<pre><code>function prize(number) {\n  if (number === 6) {\n    return 100;\n  }\n  return 0;\n}</code></pre>\n\nIf <code>number</code> has the value <code>6</code>, the <code>if</code> condition is fulfilled and the first <code>return</code>\nstatement will be executed. The function terminates and returns <code>100</code>. If <code>number</code> does not have the\nvalue <code>6</code>, the <code>if</code> condition is not fulfilled. The code execution continues after the <code>if</code> block.\nThe second return statement will be executed. The function terminates and returns <code>0</code>.<br><br>\nHowever, be careful using two or more return statements in a function. Such code can become obscure.",task:"Write a function <code>repdigit</code> that determines whether a two-digit decimal is a\n<a href=\"https://en.wikipedia.org/wiki/Repdigit\">repdigit</a> or not.\nIf the decimal is a repdigit, 'Repdigit!' should be returned, otherwise 'No Repdigit!'.<br><br>\nExample: <code>repdigit(22)</code> should return <code>'Repdigit!'</code> and\n<code>repdigit(23)</code> should return <code>'No Repdigit!'</code>.",hint:"<pre><code>function repdigit(n) {\n// Calculate the ones digit\n// of n with modulo 10.\n// Calculate the tens digit\n// of n by dividing by 10\n// and rounding down.\n// Compare ones and tens digits.\n}</code></pre>",solution:"<pre><code>function repdigit(n) {\n  let ones = n % 10;\n  let tens = Math.floor(n / 10);\n  if (ones === tens) {\n    return 'Repdigit!';\n  }\n  return 'No Repdigit!';\n}</code></pre>",tests:[function(){return jshero.testutil.assert_isFunction("repdigit")},function(){return jshero.testutil.assert_functionHasNumOfParameter("repdigit",1)},function(){return jshero.testutil.assert_functionReturns("repdigit(11)","Repdigit!")},function(){return jshero.testutil.assert_functionReturns("repdigit(55)","Repdigit!")},function(){return jshero.testutil.assert_functionReturns("repdigit(99)","Repdigit!")},function(){return jshero.testutil.assert_functionReturns("repdigit(10)","No Repdigit!")},function(){return jshero.testutil.assert_functionReturns("repdigit(12)","No Repdigit!")},function(){return jshero.testutil.assert_functionReturns("repdigit(98)","No Repdigit!")}]});
(function(testutil){jshero.koans.add({id:"increment",title:"Increment",lesson:"In programming, you often want to increase or decrease a counter by one.\n    This can easily be done with the increment or decrement operator.\n\n<pre><code>let x = 1;\nx++;\nlet y = 10;\ny--;</code></pre>\n\n<code>x++</code> is the same as <code>x = x + 1</code> and <code>y--</code> is the same as <code>y = y - 1</code>.\nAfter executing the example code, <code>x</code> has the value <code>2</code> and <code>y</code> has the value\n<code>9</code>.",task:"Which value does x have after execution of the following code?\n<pre><code>let x = 3;\nx++;\nx = x * 2;\nx--;</code></pre>",solution:"<pre><code>7</code></pre>",tests:[function(){return testutil.assert_isValue("7")}]})})(jshero.testutil);
jshero.koans.add({id:"join",title:"Array: join()",lesson:"With <code>join</code> you join all elements of an array into a string:\n\n<pre><code>let words = ['Sex', 'Drugs', 'Rock', 'Roll'];\nlet s1 = words.join();\nlet s2 = words.join(' & ');\nlet s3 = words.join(' and ');</code></pre>\n\nWithout an argument <code>join</code> joins the elements separated by commas.\n<code>s1</code> has the value <code>'Sex,Drugs,Rock,Roll'</code>.\nOtherwise, the passed argument specifies the separator.\n<code>s2</code> has the value <code>'Sex & Drugs & Rock & Roll'</code> and\n<code>s3</code> has the value  <code>'Sex and Drugs and Rock and Roll'</code>.",task:"Write a function <code>list</code> that takes an array of words and returns a string by\nconcatenating the words in the array, separated by commas and - the last word - by an 'and'.\nAn empty array should return an empty string.<br><br>\nExample: <code>list(['Huey', 'Dewey', 'Louie'])</code> should return <code>'Huey, Dewey and Louie'</code>.",hint:"Create a new array without the last element. Join the elements of this new array with a comma.\nAppend the last element of the original array. Handle edge cases separately.",solution:"<pre><code>function list(words) {\n\n  if (words.length === 0) {\n    return '';\n  }\n\n  if (words.length === 1) {\n    return words[0];\n  }\n\n  let wordsExLast = words.slice(0, words.length - 1);\n  let lastWord = words[words.length - 1];\n  return wordsExLast.join(', ') + ' and ' + lastWord;\n}</code></pre>",tests:[function(){return jshero.testutil.assert_isFunction("list")},function(){return jshero.testutil.assert_functionHasNumOfParameter("list",1)},function(){return jshero.testutil.assert_functionReturns("list([])","")},function(){return jshero.testutil.assert_functionReturns("list(['love'])","love")},function(){return jshero.testutil.assert_functionReturns("list(['Ernie', 'Bert'])","Ernie and Bert")},function(){return jshero.testutil.assert_functionReturns("list(['Huey', 'Dewey', 'Louie'])","Huey, Dewey and Louie")},function(){return jshero.testutil.assert_functionReturns("list(['C', 'C++', 'Python', 'PHP'])","C, C++, Python and PHP")}]});
(function(testutil){jshero.koans.add({id:"jsx01",title:"What is x?",lesson:"Let's practice what we've just learned. Here you have to read code.",task:"Which value does <code>x</code> have after execution of the following code?\n<pre><code>let x = 'Geeta';</code></pre>",solution:"<pre><code>'Geeta'</code></pre>",tests:[function(){return testutil.assert_isString("Geeta")}]})})(jshero.testutil);
(function(testutil){jshero.koans.add({id:"jsx02",title:"Reassignment",lesson:"A variable can be reassigned a new value at any time using the equal sign.\n<pre><code>let color = 'red';\ncolor = 'green';</code></pre>\nThe variable <code>color</code> is initialized with the value <code>'red'</code>.\nThen it receives the value <code>'green'</code>.",task:"Which value does <code>x</code> have after execution of the following code?\n<pre><code>let x = 'Tic';\nx = 'Tac';\nx = 'Toe';</code></pre>",solution:"<pre><code>'Toe'</code></pre>",tests:[function(){return testutil.assert_isString("Toe")}]})})(jshero.testutil);
(function(testutil){jshero.koans.add({id:"jsx03",title:"Assign variables",lesson:"A variable can be assigned the value of another variable.\n<pre><code>let name1 = 'Olga';\nlet name2 = name1;\nname1 = 'Clara';</code></pre>\nIn the second line, <code>name2</code> is assigned the value of <code>name1</code>.\nThe variable <code>name2</code> gets the value <code>'Olga'</code>. This value is retained by <code>name2</code>,\neven if <code>name1</code> receives a new value afterwards.",task:"Which value does <code>x</code> have after execution of the following code?\n<pre><code>let x = 'Laurel';\nlet y = 'Hardy';\nlet z = y;\ny = x;\nx = z;</code></pre>",solution:"<pre><code>'Hardy'</code></pre>",tests:[function(){return testutil.assert_isString("Hardy")}]})})(jshero.testutil);
(function(testutil){jshero.koans.add({id:"jsx04",title:"What is x?",lesson:"Just practice this again.",task:"Which value does <code>x</code> have after execution of the following code?\n<pre><code>function hello() {\n  return 'Hi!';\n}\n\nlet x = hello();</code></pre>",solution:"<pre><code>'Hi!'</code></pre>",tests:[function(){return testutil.assert_isString("Hi!")}]})})(jshero.testutil);
(function(testutil){jshero.koans.add({id:"jsx05",title:"What is x?",task:"Which value does <code>x</code> have after execution of the following code?\n<pre><code>function reply(phrase) {\n  return phrase;\n}\n\nlet x = reply('How do you do?');</code></pre>",solution:"<pre><code>'How do you do?'</code></pre>",tests:[function(){return testutil.assert_isString("How do you do?")}]})})(jshero.testutil);
(function(testutil){jshero.koans.add({id:"jsx06",title:"What is x?",task:"Which value does <code>x</code> have after execution of the following code?\n<pre><code>function whereIs(name) {\n  return 'Where is ' + name + '?';\n}\n\nlet x = whereIs('Jacky');</code></pre>",solution:"<pre><code>'Where is Jacky?'</code></pre>",tests:[function(){return testutil.assert_isString("Where is Jacky?")}]})})(jshero.testutil);
(function(testutil){jshero.koans.add({id:"jsx06b",title:"What is x?",task:"Which value does <code>x</code> have after execution of the following code?\n<pre><code>function hi(name) {\n  return 'Hi ' + name + '!';\n}\n\nlet h1 = hi('Selva');\nlet h2 = hi('Pola');\nlet x = h1 + ' ' + h2;</code></pre>",solution:"<pre><code>'Hi Selva! Hi Pola!'</code></pre>",tests:[function(){return testutil.assert_isString("Hi Selva! Hi Pola!")}]})})(jshero.testutil);
(function(testutil){jshero.koans.add({id:"jsx07",title:"Silent Teacher",lesson:"A wonderful learn to code app is\n<a href=\"http://silentteacher.toxicode.fr/\">SILENT TEACHER</a>. It's a minimalist game where beginners can discover\nwhat coding is all about and the key concepts behind code, with no explanations given. Through several series of\nquestions, the player is led to guess the rules of this language and learn from his own mistakes.\nSince SILENT TEACHER uses JavaScript, it is an excellent supplement to JS Hero. More about the app can be found\nat <a href=\"http://silentteacher.toxicode.fr/about\">Toxicode</a>.<br><br>\nHere the concatenation of strings shall be practiced again.",task:"Which value does <code>x</code> have after execution of the following code?\n<pre><code>function double(name) {\n  return name + ' and ' + name;\n}\n\nlet x = double('Roy');</code></pre>",solution:"<pre><code>'Roy and Roy'</code></pre>",tests:[function(){return testutil.assert_isString("Roy and Roy")}]})})(jshero.testutil);
(function(testutil){jshero.koans.add({id:"log",title:"Logging and Strings",lesson:"Now we want to practice logging together with string concatenation.",task:"Write a function <code>shout</code> that takes a string and\nreturns this string duplicated. In addition, the return should be logged.<br><br>\nExample: <code>shout('Fire')</code> should return <code>'FireFire'</code> and should log <code>'FireFire'</code>.",hint:"<pre><code>function shout(word) {\n  let result = word + word;\n  ...\n}</code></pre>",solution:"<pre><code>function shout(word) {\n  let result = word + word;\n  console.log(result);\n  return result;\n}</code></pre>",tests:[function(){return testutil.assert_isFunction("shout")},function(){return testutil.assert_functionHasNumOfParameter("shout",1)},function(){return testutil.assert_functionReturns("shout('Fire')","FireFire")},function(){return testutil.assert_functionLogs("shout('Fire')","FireFire")},function(){return testutil.assert_functionReturns("shout('Run')","RunRun")},function(){return testutil.assert_functionLogs("shout('Run')","RunRun")}]})})(jshero.testutil);
(function(testutil){jshero.koans.add({id:"log1",title:"Logging",lesson:"Programming always includes the search for errors.\nOne way to find errors is logging.\nDuring program execution, selective outputs are made.\nTo do this in JavaScript, use the <code>console.log</code> function:\n\n<pre><code>console.log('Hello console!');</code></pre>\n\nHere, <code>console.log</code> outputs <code>'Hello console!'</code>.\nWhere you can see the output depends on your JavaScript environment.\nIn browsers you do not see the log normally.\nBut most desktop browsers have so-called\n<a href='https://en.wikipedia.org/wiki/Web_development_tools'>developer tools</a>.\nThese are powerful tools to support web developers. One of these tools is the console.\nThe log is displayed there. How to open the developer tools depends on your browser.\nOn many desktop browsers, they are opened with the F12 key.\nYou can then select the console as a tab. Alternatively, you can open the console via the browser menu.\nThe developer tools are not available on mobile devices.\nTherefore JS Hero writes the log additionally into the test output.",task:"Write a function <code>log</code> that logs <code>'Hello Console!'</code>.\nIf you are working with a desktop browser, open the developer tools to see the output there as well.",hint:"<pre><code>function log() {\n  console.log(...);\n}</code></pre>",solution:"<pre><code>function log() {\n  console.log('Hello Console!');\n}</code></pre>",tests:[function(){return testutil.assert_isFunction("log")},function(){return testutil.assert_functionLogs("log()","Hello Console!")}]})})(jshero.testutil);
(function(testutil){jshero.koans.add({id:"log2",title:"Logging variables",lesson:"Now let's log variables:\n\n<pre><code>let scientist = 'Ken Thompson';\nconsole.log(scientist);</code></pre>\n\nThe variable <code>scientist</code> is logged.\nThe console outputs <code>'Ken Thompson'</code>.",task:"Write a function <code>log</code>, that takes a parameter and logs this parameter.<br><br>\nExample: <code>log('Ken Thompson')</code> should log <code>'Ken Thompson'</code>.",hint:"<pre><code>function log(value) {\n  ...\n}</code></pre>",solution:"<pre><code>function log(value) {\n  console.log(value);\n}</code></pre>",tests:[function(){return testutil.assert_isFunction("log")},function(){return testutil.assert_functionHasNumOfParameter("log",1)},function(){return testutil.assert_functionLogs("log('Ken Thompson')","Ken Thompson")},function(){return testutil.assert_functionLogs("log('Dennis Ritchie')","Dennis Ritchie")}]})})(jshero.testutil);
(function(testutil){jshero.koans.add({id:"math",title:"Math",lesson:"Many mathematical functions are grouped together in the <code>Math</code> object.\nFor example, <code>Math.sqrt(x)</code> returns the square root\nand <code>Math.pow(x, y)</code> calculates x to the power of y.\n\n<pre><code>let y1 = Math.sqrt(9);\nlet y2 = Math.pow(10, 3);</code></pre>\n\n<code>y1</code> has the value <code>3</code> and <code>y2</code> has the value <code>1000</code>\n(10&sup3; = 10 * 10 * 10 = 1000).",task:"Write a function <code>hypotenuse</code> that calculates the length of the hypotenuse\nof a right triangle. The length of the two legs is passed to the function. Tip: In a right\ntriangle the Pythagorean theorem is valid. If a and b are the lengths of the two legs and c\nis the length of the hypotenuse, the following is true: a&sup2; + b&sup2; = c&sup2;.\nSince 3&sup2; + 4&sup2; = 5&sup2; applies, <code>hypotenuse(3,&nbsp;4)</code> should return <code>5</code>.",hint:"<pre><code>function hypotenuse(a, b) {\n  let cSquare = Math.pow(a, 2) + Math.pow(b, 2);\n  return ...\n}</code></pre>",solution:"<pre><code>function hypotenuse(a, b) {\n  let cSquare = Math.pow(a, 2) + Math.pow(b, 2);\n  return Math.sqrt(cSquare);\n}</code></pre>",tests:[function(){return testutil.assert_isFunction("hypotenuse")},function(){return testutil.assert_functionHasNumOfParameter("hypotenuse",2)},function(){return testutil.assert_functionReturns("hypotenuse(3, 4)",5)},function(){return testutil.assert_functionReturns("hypotenuse(5, 12)",13)}]})})(jshero.testutil);
(function(testutil){jshero.koans.add({id:"mean",title:"Parentheses",lesson:"Just as in mathematics, the order of operations rules are valid in JavaScript. Multiplication and\ndivision are performed before addition and subtraction. With parentheses you can specify the order of operations.\n\n<pre><code>let x1 = 3 + 4 * 2;\nlet x2 = (3 + 4) * 2;</code></pre>\n\n<code>x1</code> is <code>11</code> and <code>x2</code> is <code>14</code>.",task:"Write a function <code>mean</code> that takes 2 numbers and returns their mean value.<br><br>\nExample: <code>mean(1, 2)</code> should return <code>1.5</code>.",hint:"<pre><code>The mean value of two numbers\nx and y is (x + y) / 2.</code></pre>",solution:"<pre><code>function mean(x, y) {\n  return (x + y) / 2;\n}</code></pre>",tests:[function(){return testutil.assert_isFunction("mean")},function(){return testutil.assert_functionHasNumOfParameter("mean",2)},function(){return testutil.assert_functionReturns("mean(1, 2)",1.5)},function(){return testutil.assert_functionReturns("mean(5, 9)",7)},function(){return testutil.assert_functionReturns("mean(0, 0)",0)}]})})(jshero.testutil);
(function(testutil){jshero.koans.add({id:"minmax",title:"min and max",lesson:"The minimum and maximum of a set of numbers can be calculated with\n<code>Math.min()</code> and <code>Math.max()</code>:\n\n<pre><code>let min = Math.min(5, 7);\nlet max = Math.max(3, 9, 2);</code></pre>\n\n<code>min</code> receives the value <code>5</code> and <code>max</code> the value <code>9</code>.\nThe special: Both functions can be called with an arbitrary number of arguments.",task:"Write a function <code>midrange</code>, that calculates the midrange of 3 numbers.\nThe <a href='https://en.wikipedia.org/wiki/Mid-range'>midrange</a>\nis the mean of the smallest and largest number.<br><br>\nExample: <code>midrange(3, 9, 1)</code> should return <code>(9+1)/2</code> = <code>5</code>.",hint:"<pre><code>function midrange(a, b, c) {\n  let min = Math.min(a, b, c);\n  let max = Math.max(a, b, c);\n  ...\n}</code></pre>",solution:"<pre><code>function midrange(a, b, c) {\n  let min = Math.min(a, b, c);\n  let max = Math.max(a, b, c);\n  return (min + max) / 2;\n}</code></pre>",tests:[function(){return testutil.assert_isFunction("midrange")},function(){return testutil.assert_functionHasNumOfParameter("midrange",3)},function(){return testutil.assert_functionReturns("midrange(3, 9, 1)",5)},function(){return testutil.assert_functionReturns("midrange(3, 0, 8)",4)},function(){return testutil.assert_functionReturns("midrange(7, 4, 0)",3.5)},function(){return testutil.assert_functionReturns("midrange(-6, -5, -2)",-4)},function(){return testutil.assert_functionReturns("midrange(5, -5, 2)",0)},function(){return testutil.assert_functionReturns("midrange(10, 20, 17)",15)}]})})(jshero.testutil);
(function(testutil){jshero.koans.add({id:"modulo",title:"Modulo",lesson:"Another arithmetic operator is modulo. It calculates the remainder of a division and is represented by <code>%</code>.\n\n<pre><code>let x = 7 % 2;\nlet y = 20 % 3;</code></pre>\n\n7 divided by 2 is 3 with remainder 1. <code>x</code> is <code>1</code>.\n20 divided by 3 is 6 with remainder 2. <code>y</code> is <code>2</code>.",task:"Write a function <code>onesDigit</code> that takes a natural number and returns the ones digit of that number.<br><br>\nExample: <code>onesDigit(2674)</code> should return <code>4</code>.",hint:"<pre><code>function onesDigit(n) {\n// Use modulo 10.\n}</code></pre>",solution:"<pre><code>function onesDigit(n) {\n  return n % 10;\n}</code></pre>",tests:[function(){return testutil.assert_isFunction("onesDigit")},function(){return testutil.assert_functionHasNumOfParameter("onesDigit",1)},function(){return testutil.assert_functionReturns("onesDigit(0)",0)},function(){return testutil.assert_functionReturns("onesDigit(82)",2)},function(){return testutil.assert_functionReturns("onesDigit(119)",9)}]})})(jshero.testutil);
(function(testutil){jshero.koans.add({id:"nan",title:"NaN",lesson:"<code>NaN</code> is a value representing Not-A-Number. Numeric operations or functions return\n<code>NaN</code> if they cannot calculate a value. We had seen this with\n<code><a href='parseint.html'>parseInt</a></code>. It returns <code>NaN</code>, if it can't parse a number.\nAnother example is the calculation of the square root from a negative number:\n\n<pre><code>let age = parseInt('Babylon');\nlet length = Math.sqrt(-1);</code></pre>\n\nBoth <code>age</code> and <code>length</code> get the value <code>NaN</code>.<br><br>\nIf you want to test for <code>NaN</code>, you unfortunately can't use <a href='equals.html'>strict equality</a>.\n<code>NaN</code> is the only value in JavaScript that when compared to itself returns <code>false</code>.\nThat is, <code>NaN&nbsp;===&nbsp;NaN</code> results in <code>false</code>.\nTo check if a value is <code>NaN</code> use the <code>Number.isNaN</code> function:\n\n<pre><code>let input = 'Babylon';\nlet message;\nlet age = parseInt(input);\nif ( Number.isNaN(age) ) {\n  message = 'Input is not a number!';\n}</code></pre>\n\nThe following task is challenging.",task:"Write a function <code>parseFirstInt</code> that takes a string and returns the first integer present in the\nstring. If the string does not contain an integer, you should get <code>NaN</code>.<br><br>\nExample: <code>parseFirstInt('No. 10')</code> should return <code>10</code> and <code>parseFirstInt('Babylon')</code> should\nreturn <code>NaN</code>.",hint:"Use a loop. Within the loop use <code>parseInt()</code>.",solution:"<pre><code>function parseFirstInt(input) {\n\n  let inputToParse = input;\n\n  for (let i = 0; i < input.length; i++) {\n    let firstInt = parseInt(inputToParse);\n    if (!Number.isNaN(firstInt)) {\n      return firstInt;\n    }\n    inputToParse = inputToParse.substr(1);\n  }\n\n  return NaN;\n}</code></pre>",tests:[function(){return testutil.assert_isFunction("parseFirstInt")},function(){return testutil.assert_functionHasNumOfParameter("parseFirstInt",1)},function(){return testutil.assert_functionReturns("parseFirstInt('No. 10')",10)},function(){return testutil.assert_functionReturns("parseFirstInt('18.12')",18)},function(){return testutil.assert_functionReturns("parseFirstInt('Li is 22 years old.')",22)},function(){return testutil.assert_functionReturns("parseFirstInt('sum: -120')",-120)},function(){return testutil.assert_functionReturns("parseFirstInt('a string')",NaN)}]})})(jshero.testutil);
jshero.koans.add({id:"nor",title:"NOR",lesson:"In the last task you have coded a so-called NAND (Not AND) gate. NAND gates are a standard component in\ndigital electronics. Any Boolean function can be implemented by using a combination of NAND gates.\nHere you will get to know another standard gate, the NOR (Not OR) gate.",task:"Write a function <code>nor</code> that takes two Boolean values.\nIf both values are <code>false</code>, the result should be <code>true</code>.\nIn the other cases the return should be <code>false</code>.<br><br>\nI.e.: The call <code>nor(false,&nbsp;false)</code> should return <code>true</code>. The calls <code>nor(true,&nbsp;false)</code>,\n<code>nor(false,&nbsp;true)</code> and <code>nor(true,&nbsp;true)</code> should return <code>false</code>.",solution:"<pre><code>function nor(b1, b2) {\n  return !(b1 || b2);\n}</code></pre>",tests:[function(){return jshero.testutil.assert_isFunction("nor")},function(){return jshero.testutil.assert_functionHasNumOfParameter("nor",2)},function(){return jshero.testutil.assert_functionReturns("nor(false, false)",true)},function(){return jshero.testutil.assert_functionReturns("nor(false, true)",false)},function(){return jshero.testutil.assert_functionReturns("nor(true, false)",false)},function(){return jshero.testutil.assert_functionReturns("nor(true, true)",false)}]});
jshero.koans.add({id:"notequals",title:"Strict inequality",lesson:"With <code>!==</code> two values are compared for strict inequality.\n\n<pre><code>let c1 = 'rose' !== 'Rose';\nlet c2 = 10 !== '10';</code></pre>\n\nBoth comparisons result in <code>true</code>.\nThe first one, because the two strings differ in upper and lower case.\nThe second, because the two values differ in type.",task:"Write a function <code>unequal</code> that checks 3 values for strict inequality. The function\nshould return <code>true</code> if all three parameters are strict unequal. Otherwise <code>false</code>.<br><br>\nExample: <code>unequal(1,&nbsp;2,&nbsp;3)</code> should return <code>true</code> and\n<code>unequal(1,&nbsp;1,&nbsp;2)</code> should return <code>false</code>.",hint:"<pre><code>function unequal(a, b, c) {\n  return a !== b && ...\n}</code></pre>",solution:"<pre><code>function unequal(a, b, c) {\n  return a !== b && a !== c && b !== c;\n}</code></pre>",tests:[function(){return jshero.testutil.assert_isFunction("unequal")},function(){return jshero.testutil.assert_functionHasNumOfParameter("unequal",3)},function(){return jshero.testutil.assert_functionReturns("unequal(1, 2, 3)",true)},function(){return jshero.testutil.assert_functionReturns("unequal(2, 1, 1)",false)},function(){return jshero.testutil.assert_functionReturns("unequal(1, 2, 1)",false)},function(){return jshero.testutil.assert_functionReturns("unequal(1, 1, 2)",false)},function(){return jshero.testutil.assert_functionReturns("unequal('rose', 'Rose', 'ROSE')",true)},function(){return jshero.testutil.assert_functionReturns("unequal('1', 1, true)",true)}]});
jshero.koans.add({id:"null",title:"null",lesson:"Besides <code>undefined</code> JavaScript knows another value for \"no value\": <code>null</code>.\nYou can assign the value <code>null</code> to a variable and test for <code>null</code> with strict equality:\n\n<pre><code>let foo = null;\nif (foo === null) {\n  foo = 1;\n}</code></pre>\n\nIt is a mistake that JavaScript has two values for \"no value\". One should always treat <code>undefined</code> and\n<code>null</code> equally.",task:"Write a function <code>cutComment</code> that takes one line of JavaScript and returns a possible line comment trimmed.\nIf the line contains no line comment, <code>null</code> should be returned.\nFor simplicity, we assume that the code does not contain the comment characters within a string.<br><br>\nExample: <code>cutCommt('let foo; // bar')</code> should return <code>'bar'</code>.",solution:"<pre><code>function cutComment(str) {\n  let startOfComment = str.indexOf('//');\n  if (startOfComment === -1) {\n    return null;\n  }\n  let comment = str.substr(startOfComment + 2);\n  return comment.trim();\n}</code></pre>",tests:[function(){return jshero.testutil.assert_isFunction("cutComment")},function(){return jshero.testutil.assert_functionHasNumOfParameter("cutComment",1)},function(){return jshero.testutil.assert_functionReturns("cutComment('let foo; // bar')","bar")},function(){return jshero.testutil.assert_functionReturns("cutComment('let x = 1/3; //~0.33')","~0.33")},function(){return jshero.testutil.assert_functionReturns("cutComment('let i;')",null)}]});
(function(testutil){jshero.koans.add({id:"number",title:"Numbers",lesson:"Numbers are represented by simple numerals. They can have a decimal point and a minus sign.\n\n<pre><code>let x1 = 1;\nlet x2 = 1.0;\nlet x3 = 3.14;\nlet x4 = -1;</code></pre>\n\n<code>1</code> and <code>1.0</code> are the same number.\nYou can calculate with numbers. The four basic arithmetics adding, subtracting, multiplying and dividing are represented by\n<code> + - * </code> and <code>/</code>.\n\n<pre><code>let x1 = 6;\nlet x2 = 2;\nlet x3 = x1 + x2;\nlet x4 = x1 - x2;\nlet x5 = x1 * x2;\nlet x6 = x1 / x2;</code></pre>\n\nThe variables <code>x3</code> to <code>x6</code> thus have the values <code>8</code>, <code>4</code>, <code>12</code> and <code>3</code>.",task:"Write a function <code>add</code> that takes two numbers and returns their sum.<br><br>\nExample: <code>add(1,&nbsp;2)</code> should return <code>3</code>.",hint:"<pre><code>function add(x, y) {\n  return ...\n}</code></pre>",solution:"<pre><code>function add(x, y) {\n  return x + y;\n}</code></pre>",tests:[function(){return testutil.assert_isFunction("add")},function(){return testutil.assert_functionHasNumOfParameter("add",2)},function(){return testutil.assert_functionReturns("add(0, 0)",0)},function(){return testutil.assert_functionReturns("add(2, 3)",5)},function(){return testutil.assert_functionReturns("add(-2.5, 1)",-1.5)}]})})(jshero.testutil);
jshero.koans.add({id:"parameter",title:"Parameters",lesson:"Now we get to know functions with parameters. With\n<pre><code>function give(input) {\n  return input;<br>}</code></pre>\nwe define a function that simply returns the parameter <code>input</code>.\nParameters are variables. With\n<pre><code>let result = give('apple');</code></pre>\nwe call the function and pass it the argument <code>'apple'</code>. The function will be executed.\nThe argument <code>'apple'</code> will be assigned to the parameter <code>input</code>.\n<code>input</code> gets the value <code>'apple'</code>.\nThe variable <code>input</code> is returned in the single code line of the function.\nThis return is assigned to the variable <code>result</code>. Finally, <code>result</code> has the value <code>'apple'</code>.",task:"Write a function <code>echo</code> that also returns the passed parameter.\n<code>echo('Greta')</code> should return <code>'Greta'</code> and <code>echo('CO2')</code> should return <code>'CO2'</code>",hint:"<pre><code>function echo(sound) {\n  ...\n}</code></pre>",solution:"<pre><code>function echo(sound) {\n  return sound;\n}</code></pre>",tests:[function(){return jshero.testutil.assert_isFunction("echo")},function(){return jshero.testutil.assert_functionHasNumOfParameter("echo",1)},function(){return jshero.testutil.assert_functionReturns("echo('Greta')","Greta")},function(){return jshero.testutil.assert_functionReturns("echo('CO2')","CO2")}]});
jshero.koans.add({id:"parseint",title:"parseInt()",lesson:"Sometimes you want to read a number from a string. In case of an integer (..., -2, -1, 0, 1, 2, ..) you can\nuse the <code>parseInt</code> function. The following examples return <code>19</code> or <code>-19</code>:\n\n<pre><code>let n1 = parseInt('19', 10);\nlet n2 = parseInt('+19', 10);\nlet n3 = parseInt('-19', 10);\nlet n4 = parseInt('19 Grad', 10);\nlet n5 = parseInt('19.1', 10);\nlet n6 = parseInt('019', 10);\nlet n7 = parseInt(' 19', 10);</code></pre>\n\nBesides the direct reading of integers with or without sign (n1, n2, n3), <code>parseInt</code> can also handle some\nmore complex cases. Non-numeric characters after (n4, n5) as well as zeros (n6) and spaces (n7) before the integer\nwill be ignored.<br><br>\n\nIn all examples, the second parameter passed to <code>parseInt</code> is <code>10</code>.\nThis parameter specifies the radix (the base in mathematical numeral systems) on which the number is to be interpreted.\n<code>10</code> represents the usual decimal system. If you omit the second parameter, the decimal system is normally\nused as default. Since there are exceptions to this rule, you should always specify the radix!<br><br>\n\nIf <code>parseInt</code> cannot read an integer, it returns <code>NaN</code> (Not a Number).\n\n<pre><code>let n1 = parseInt('text', 10);\nlet n2 = parseInt('No. 10', 10);</code></pre>\n\nIn the first case there is no number at all. In the second case, there are non-numeric characters before the number.\nThis is not allowed and results in <code>NaN</code>.<br><br>\n\nA detailed documentation of <code>parseInt</code> can be found at\n<a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt'>Mozilla web docs</a>.",task:"Write a function <code>add</code> that takes a string with a summation task and returns its result as a number.\nTwo natural numbers should be added. The summation task is a string of the form '102+17'.<br><br>\nExample: <code>add('102+17')</code> should return <code>119</code>.",hint:"Determine the first summand with <code>parseInt</code>.\nUse <code>indexOf</code> to determine the position of the plus sign.\nDetermine with <code>substr</code> the substring after the plus sign.\nUse <code>parseInt</code> to determine the second summand from this substring.",solution:"<pre><code>function add(s) {\n  let summand1 = parseInt(s, 10);\n  let indexPlus = s.indexOf('+');\n  let sAfterPlus = s.substr(indexPlus + 1);\n  let summand2 = parseInt(sAfterPlus, 10);\n  return summand1 + summand2;\n}</code></pre>",tests:[function(){return jshero.testutil.assert_isFunction("add")},function(){return jshero.testutil.assert_functionHasNumOfParameter("add",1)},function(){return jshero.testutil.assert_functionReturns("add('1+2')",3)},function(){return jshero.testutil.assert_functionReturns("add('10+100')",110)},function(){return jshero.testutil.assert_functionReturns("add('10123+456')",10579)}]});
(function(testutil){jshero.koans.add({id:"pi",title:"Math.PI",lesson:"Besides functions <code>Math</code> offers some mathematical constants.\n  <code>Math.PI</code> gives &#960; (roughly 3.14) and <code>Math.E</code> gives Euler's number e (roughly 2.71).",task:"Write a function <code>area</code> that calculates the area of a circle.\nThe function is given the radius of the circle.<br><br>\nExample: <code>area(1)</code> should return <code>&#960;</code> and <code>area(2)</code> should return <code>4 * &#960;</code>.",tests:[function(){return testutil.assert_isFunction("area")},function(){return testutil.assert_functionHasNumOfParameter("area",1)},function(){return testutil.assert_functionReturns("area(0)",0)},function(){return testutil.assert_functionReturns("area(1)",Math.PI)},function(){return testutil.assert_functionReturns("area(2)",4*Math.PI)}]})})(jshero.testutil);
(function(testutil){jshero.koans.add({id:"playground",title:"Playground",lesson:"JS Hero has a <a href=\"../playground.html\">Playground</a>. Here I want to show you how to write small programs using the Playground.\nPrograms usually has an input and an output. Within the Playground, the easiest way to achieve this is to use the two functions\n<code>prompt()</code> and <code>alert()</code>:\n\n<pre><code>let name = prompt('What is your name?');\nalert('Hello ' + name + '!');</code></pre>\n\nIf you enter this code in the Playground and click on \"Run\", a dialog opens with the question \"What is your name?\".\nIf you type \"Kitty Pryde\" and confirm the input, the dialog closes and a window with the message \"Hello Kitty Pryde!\" opens.\nAfter clicking on \"OK\" this window closes as well and our little program ends. With \"Run\" it can be started again.\n<br><br>\n<code>prompt()</code> and <code>alert()</code> are two functions provided by the browser.\n<br><br>\n<code>prompt()</code> takes a string as parameter. Above <code>prompt()</code> is passed the string <code>'What is your name?'</code>.\nThis string is displayed in the dialog window. Now <code>prompt()</code> interrupts the program execution and waits for our input. \nIf we enter \"Kitty Pryde\" and confirm the input with \"OK\", <code>prompt()</code> returns the string <code>'Kitty Pryde'</code>.\nThis return is assigned to the variable <code>name</code>.\n<br><br>\n<code>alert()</code>, like <code>prompt()</code>, takes a string as parameter.\nAbove we pass the expression <code>'Hello' + name + '!'</code> to <code>alert()</code>. The variable\n<code>name</code> has the value <code>'Kitty Pryde'</code>, so this expression results in <code>'Hello Kitty Pride!'</code>.\nWith this string <code>alert()</code> is called. <code>alert()</code> displays this string in a small window and interrupts the program execution.\nAfter clicking on \"OK\" <code>alert()</code> terminates without a return value.\n<br><br>\n<code>prompt()</code> and <code>alert()</code> should not be used in professional web development. But they are ideal for practicing.\n<br><br>\n<code>prompt()</code> and <code>alert()</code> can't be used on most JS Hero exercise pages.\nThis is because the solution code runs encapsulated in a so-called WebWorker. Both functions are not available there.\n<br><br>\nSo, let's practice variable assignment and concatenation again:",task:"Which value does <code>x</code> have after execution of the following code?\n<pre><code>let x = 'Tic';\nx = x + 'Tac';\nx = x + x;</code></pre>",hint:"Paste the code into the Playgrund and display <code>x</code> with <code>alert()</code>.",tests:[function(){return testutil.assert_isString("TicTacTicTac")}]})})(jshero.testutil);
(function(testutil,evaluator){let evalDice=function(){return evaluator.evalTest("dice()")};let isOneToSix=function(x){return x===1||x===2||x===3||x===4||x===5||x===6};let throwA=function(x){let result;for(let i=0;i<1000;i++){result=evalDice();if(result===x){return true}}return false};let testWith=function(x){let ok,msg,e;try{ok=throwA(x);if(ok){msg="<code>dice()</code> returned at least once <code>"+x+"</code> at 1000 calls."}else{msg="<code>dice()</code> did not return <code>"+x+"</code> at 1000 calls."}}catch(exc){ok=false;msg="Error when calling <code>dice()</code>.";e=exc}return{ok:ok,msg:msg,e:e}};jshero.koans.add({id:"random",title:"Random numbers",lesson:"<code>Math.random()</code> returns a pseudo-random number between 0 (inclusive) and 1 (exclusive).\n\n<pre><code>let x = Math.random();</code></pre>\n\n<code>x</code> could, for example, get the value <code>0.6206372241429993</code>.\nEach call of <code>Math.random()</code> generates a new random number.\nThe numbers are equally distributed between 0 and 1. They are called pseudo-random numbers,\nbecause they look random but are still calculated.\nIf you want to get random numbers in another range or with a different distribution,\nyou have to transform the numbers generated by <code>Math.random()</code> adequately.\nThis should be practiced now.",task:"Write a function <code>dice</code> that returns like a dice a random number between 1 and 6.",tests:[function(){return testutil.assert_isFunction("dice")},function(){return testutil.assert_functionHasNumOfParameter("dice",0)},function(){let ok,msg,e;try{ok=true;let result;for(let i=0;i<1000;i++){result=evalDice();if(!isOneToSix(result)){ok=false;break}}if(ok){msg="<code>dice()</code> returns only natural numbers between <code>1</code> and <code>6</code> at 1000 calls."}else{msg="<code>dice()</code> returns at least once <code>"+JSON.stringify(result)+" </code> at 1000 calls. This is not a natural number between <code>1</code> and <code>6</code>."}}catch(exc){ok=false;msg="Error when calling <code>dice()</code>.";e=exc}return{ok:ok,msg:msg,e:e}},function(){return testWith(1)},function(){return testWith(2)},function(){return testWith(3)},function(){return testWith(4)},function(){return testWith(5)},function(){return testWith(6)}]})})(jshero.testutil,jshero.evaluator);
(function(testutil){jshero.koans.add({id:"recursion",title:"Recursion",lesson:"Functions can call themselves. This is called\n<a href='https://en.wikipedia.org/wiki/Recursion_(computer_science)'>recursion</a>.\nThe best known example is the calculation of the factorial:\n\n<pre><code>function factorial(n) {\n  if (n === 0) {\n    return 1;\n  }\n  return factorial(n - 1) * n;\n}</code></pre>\n\nThe <a href='https://en.wikipedia.org/wiki/Factorial'>factorial</a> of a natural number is the product of all natural numbers\n(excluding zero) less than or equal to that number. It is marked by a trailing exclamation mark: n! = 1 * 2 * 3 ... (n-1) * n.\nYou can see that you can use the factorial of n-1 to calculate the factorial of n: n! = (n-1)! * n.\nThe code above is the implementation of this equation. To calculate the factorial of n, you have to calculate the factorial\nof n-1 and multiply the result by n. So the function calls itself repeatedly with a value reduced by 1.\nNow you need a termination condition so that the recursion does not continue infinitely. This termination condition\nis implemented by the <code>if</code> condition. If n has reached 0, the function no longer calls itself, but the result,\nnamely 0! = 1, is returned directly.",task:"Write a function <code>reverse</code> that reverses the order of the characters in a string.\nThe function should be recursive.<br><br>\nExample: <code>reverse('live')</code> should return <code>'evil'</code>.",tests:[function(){return testutil.assert_isFunction("reverse")},function(){return testutil.assert_functionHasNumOfParameter("reverse",1)},function(){return testutil.assert_functionReturns("reverse('')","")},function(){return testutil.assert_functionReturns("reverse('X')","X")},function(){return testutil.assert_functionReturns("reverse('az')","za")},function(){return testutil.assert_functionReturns("reverse('12345')","54321")},function(){return testutil.assert_functionReturns("reverse('live')","evil")}]})})(jshero.testutil);
jshero.koans.add({id:"replace",title:"String: replace()",lesson:"The <code>replace</code> method replaces a substring with another:\n\n<pre><code>let str = 'JavaScript';\nlet newstr = str.replace('Java', 'ECMA');</code></pre>\n\n<code>'Java'</code> is replaced with <code>'ECMA'</code>. Thus <code>newstr</code> has the value <code>'ECMAScript'</code>.\nThe original string remains unchanged. Only the first occurrence is replaced:\n\n<pre><code>let newstr = 'Dada'.replace('a', 'i');</code></pre>\n\n<code>newstr</code> has the value <code>'Dida'</code> and not <code>'Didi'</code>.",task:"Write a function <code>normalize</code>, that replaces <code>'-'</code> with <code>'/'</code> in a date string.<br><br>\nExample: <code>normalize('20-05-2017')</code> should return <code>'20/05/2017'</code>.",tests:[function(){return jshero.testutil.assert_isFunction("normalize")},function(){return jshero.testutil.assert_functionHasNumOfParameter("normalize",1)},function(){return jshero.testutil.assert_functionReturns("normalize('20-05-2017')","20/05/2017")},function(){return jshero.testutil.assert_functionReturns("normalize('8-11-1922')","8/11/1922")}]});
(function(testutil){jshero.koans.add({id:"roman1",title:"Roman numerals I",lesson:"The following task is challenging.",task:"Write a function <code>arabic</code> that converts a\n<a href='https://en.wikipedia.org/wiki/Roman_numerals'>Roman number</a> (up to 1000) into an\n<a href='https://en.wikipedia.org/wiki/Hindu%E2%80%93Arabic_numeral_system'>Arabic</a>.<br><br>\nExample: <code>arabic('CDLXXXIII')</code> should return <code>483</code>.",tests:[function(){return testutil.assert_isFunction("arabic")},function(){return testutil.assert_functionHasNumOfParameter("arabic",1)},function(){return testutil.assert_functionReturns("arabic('I')",1)},function(){return testutil.assert_functionReturns("arabic('II')",2)},function(){return testutil.assert_functionReturns("arabic('III')",3)},function(){return testutil.assert_functionReturns("arabic('IV')",4)},function(){return testutil.assert_functionReturns("arabic('V')",5)},function(){return testutil.assert_functionReturns("arabic('VI')",6)},function(){return testutil.assert_functionReturns("arabic('X')",10)},function(){return testutil.assert_functionReturns("arabic('CDLXXXIII')",483)},function(){return testutil.assert_functionReturns("arabic('DCLXVI')",666)},function(){return testutil.assert_functionReturns("arabic('CMXCIX')",999)},function(){return testutil.assert_functionReturns("arabic('M')",1000)}]})})(jshero.testutil);
(function(testutil){jshero.koans.add({id:"roman2",title:"Roman numerals II",lesson:"Now let's try it vice-versa.",task:"Write a function <code>roman</code> that converts an Arabic number (up to 1000) into a Roman numeral.<br><br>\nExample: <code>roman(483)</code> should return <code>'CDLXXXIII'</code>.",tests:[function(){return testutil.assert_isFunction("roman")},function(){return testutil.assert_functionHasNumOfParameter("roman",1)},function(){return testutil.assert_functionReturns("roman(1)","I")},function(){return testutil.assert_functionReturns("roman(2)","II")},function(){return testutil.assert_functionReturns("roman(3)","III")},function(){return testutil.assert_functionReturns("roman(4)","IV")},function(){return testutil.assert_functionReturns("roman(5)","V")},function(){return testutil.assert_functionReturns("roman(6)","VI")},function(){return testutil.assert_functionReturns("roman(10)","X")},function(){return testutil.assert_functionReturns("roman(483)","CDLXXXIII")},function(){return testutil.assert_functionReturns("roman(666)","DCLXVI")},function(){return testutil.assert_functionReturns("roman(999)","CMXCIX")},function(){return testutil.assert_functionReturns("roman(1000)","M")}]})})(jshero.testutil);
jshero.koans.add({id:"round",title:"Rounding",lesson:"If you want to round a number, you can use the\n<code>Math.round()</code>, <code>Math.floor()</code> and <code>Math.ceil()</code> functions.\n\n<pre><code>let a = Math.round(5.49);\nlet b = Math.round(4.5);\nlet c = Math.floor(5.99);\nlet d = Math.ceil(4.01);</code></pre>\n\n<code>Math.round()</code> rounds a number to the nearest integer,\n<code>Math.floor()</code> rounds a number downwards to the nearest integer and\n<code>Math.ceil()</code> rounds a number upwards to the nearest integer.\nTherefore, the variables <code>a</code> to <code>d</code> all get the value <code>5</code>.",task:"Write a function <code>round100</code> that rounds a number to the nearest hundred.<br><br>\nExample: <code>round100(1749)</code> should return <code>1700</code> and <code>round100(856.12)</code> should return <code>900</code>.",tests:[function(){return jshero.testutil.assert_isFunction("round100")},function(){return jshero.testutil.assert_functionHasNumOfParameter("round100",1)},function(){return jshero.testutil.assert_functionReturns("round100(49.999)",0)},function(){return jshero.testutil.assert_functionReturns("round100(50)",100)},function(){return jshero.testutil.assert_functionReturns("round100(349)",300)},function(){return jshero.testutil.assert_functionReturns("round100(350)",400)},function(){return jshero.testutil.assert_functionReturns("round100(4649)",4600)},function(){return jshero.testutil.assert_functionReturns("round100(4650)",4700)}]});
jshero.koans.add({id:"slice",title:"Array: slice()",lesson:"With <code>slice</code> you can copy a subarray from an array:\n\n<pre><code>let abcd = ['a', 'b', 'c', 'd'];\nlet ab = abcd.slice(0, 2);\nlet bc = abcd.slice(1, 3);\nlet bcd = abcd.slice(1, 4);</code></pre>\n\nThe first parameter specifies the start index (included) and the second parameter specifies the end index (excluded).\nThe original array will not be modified.",task:"Write a function <code>halve</code> that copies the first half of an array.\nWith an odd number of array elements, the middle element should belong to the first half.<br><br>\nExample: <code>halve([1,&nbsp;2,&nbsp;3,&nbsp;4])</code> should return <code>[1,&nbsp;2]</code>.",tests:[function(){return jshero.testutil.assert_isFunction("halve")},function(){return jshero.testutil.assert_functionHasNumOfParameter("halve",1)},function(){return jshero.testutil.assert_functionReturns("halve([1, 2])",[1])},function(){return jshero.testutil.assert_functionReturns("halve([1, 2, 3])",[1,2])},function(){return jshero.testutil.assert_functionReturns("halve([1, 2, 3, 4])",[1,2])},function(){return jshero.testutil.assert_functionReturns("halve([1, 2, 3, 4, 5])",[1,2,3])}]});
(function(testutil){jshero.koans.add({id:"string",title:"Strings",lesson:"We have seen that a variable is a container for a value. A value can be a text like <code>'Hello world!'</code>.\nValues have a type. The type of <code>'Hello world!'</code> is string. You can use single or double quotes.\n<code>'Hello world!'</code> is the same string as <code>\"Hello world!\"</code>.<br>\nYou can work with strings. For example, they can be concatenated. This is done with the <code>+</code> sign.\n<code>'Java' + 'Script'</code> results in the string <code>'JavaScript'</code>.\nThe following function appends <code>' is great!'</code> to the passed parameter and returns the result:\n\n<pre><code>function praise(name) {\n  return name + ' is great!';\n}</code></pre>\n\n<code>praise('JavaScript')</code> will return <code>'JavaScript is great!'</code>.",task:"Write a function <code>greet</code> having one parameter and returning <code>'Hello &lt;parameter&gt;!'</code>.<br><br>\nExample: <code>greet('Ada')</code> should return <code>'Hello Ada!'</code> and <code>greet('Grace')</code> should return\n<code>'Hello Grace!'</code>.",hint:"<pre><code>function greet(name) {\n  return ...\n}</code></pre>",solution:"<pre><code>function greet(name) {\n  return 'Hello ' + name + '!';\n}</code></pre>",tests:[function(){return testutil.assert_isFunction("greet")},function(){return testutil.assert_functionHasNumOfParameter("greet",1)},function(){return testutil.assert_functionReturns("greet('Ada')","Hello Ada!")},function(){return testutil.assert_functionReturns("greet('Grace')","Hello Grace!")},function(){return testutil.assert_functionReturns("greet('Joan')","Hello Joan!")}]})})(jshero.testutil);
(function(testutil){jshero.koans.add({id:"stringcharat",title:"String: charAt()",lesson:"To get a character from a string at a specified index, use the <code>charAt(index)</code> method:\n<pre><code>let char0 = 'Frantz'.charAt(0);\nlet char1 = 'Frantz'.charAt(1);\nlet char9 = 'Frantz'.charAt(9);</code></pre>\nThe first character has the index 0. So <code>char0</code> has the value <code>'F'</code> and <code>char1</code> has the value <code>'r'</code>.\nIf the index is larger than the index of the last character, the empty string is returned. So <code>char9</code> has the value <code>''</code>.",task:"Write a function <code>shortcut</code> that takes two strings and returns the initial letters of theses strings.<br><br>\nExample: <code>shortcut('Amnesty', 'International')</code> should return <code>'AI'</code>.",hint:"<pre><code>function shortcut(s1, s2) {\n  ...\n}</code></pre>",solution:"<pre><code>function shortcut(s1, s2) {\n  return s1.charAt(0) + s2.charAt(0);\n}</code></pre>",tests:[function(){return testutil.assert_isFunction("shortcut")},function(){return testutil.assert_functionHasNumOfParameter("shortcut",2)},function(){return testutil.assert_functionReturns("shortcut('Amnesty', 'International')","AI")},function(){return testutil.assert_functionReturns("shortcut('Java', 'Script')","JS")}]})})(jshero.testutil);
jshero.koans.add({id:"stringindexof",title:"String: indexOf()",lesson:"To determine the first occurrence of a string within another string, use the <code>indexOf</code> method:\n\n<pre><code>let n1 = 'bit'.indexOf('it');\nlet n2 = 'bit'.indexOf('js');\nlet n3 = 'bit'.indexOf('IT');</code></pre>\n\n<code>n1</code> is <code>1</code>, because the starting position of <code>'it'</code> in <code>'bit'</code> is <code>1</code>.\nAs usual, counting starts at 0. <code>indexOf</code> returns <code>-1</code> if the search string does not occur in the calling string.\nThus <code>n2</code> is <code>-1</code>. The <code>indexOf</code> method is case sensitive. So <code>n3</code> is also <code>-1</code>.",task:"Write a function <code>indexOfIgnoreCase</code> taking two strings\nand determining the first occurrence of the second string in the first string. The function should be case insensitive.<br><br>\nExample: <code>indexOfIgnoreCase('bit','it')</code> and <code>indexOfIgnoreCase('bit','IT')</code> should return <code>1</code>.",hint:"<pre><code>function indexOfIgnoreCase(s1, s2) {\n// Change s1 and s2\n// first to lowercase.\n// Then use the\n// indexOf method.\n}</code></pre>",solution:"<pre><code>function indexOfIgnoreCase(s1, s2) {\n  let s1Lower = s1.toLowerCase();\n  let s2Lower = s2.toLowerCase();\n  return s1Lower.indexOf(s2Lower);\n}</code></pre>",tests:[function(){return jshero.testutil.assert_isFunction("indexOfIgnoreCase")},function(){return jshero.testutil.assert_functionHasNumOfParameter("indexOfIgnoreCase",2)},function(){return jshero.testutil.assert_functionReturns("indexOfIgnoreCase('bit', 'it')",1)},function(){return jshero.testutil.assert_functionReturns("indexOfIgnoreCase('bit', 'IT')",1)},function(){return jshero.testutil.assert_functionReturns("indexOfIgnoreCase('BYTE', 'te')",2)},function(){return jshero.testutil.assert_functionReturns("indexOfIgnoreCase('BYTE', 'TE')",2)},function(){return jshero.testutil.assert_functionReturns("indexOfIgnoreCase('BiT', 'bIt')",0)},function(){return jshero.testutil.assert_functionReturns("indexOfIgnoreCase('bit', 'bt')",-1)}]});
jshero.koans.add({id:"stringindexof2",title:"String: indexOf() with from index",lesson:"The <code>indexOf</code> method allows you to specify the position\nfrom which the search should start. This is done with a second parameter.\n\n<pre><code>let n1 = 'White Rabbit'.indexOf('it', 1);\nlet n2 = 'White Rabbit'.indexOf('it', 3);</code></pre>\n\nThe first <code>'it'</code> in <code>'White Rabbit'</code> has the index <code>2</code>.\nStarting our search at position <code>1</code> it will be found. <code>n1</code> is <code>2</code>.\nThe second <code>'it'</code> in <code>'White Rabbit'</code> has the index <code>10</code>.\nStarting our search at position <code>3</code> it will be found. <code>n2</code> is <code>10</code>.",task:"Write a function <code>secondIndexOf</code>, taking two strings\nand determining the second occurrence of the second string in the first string.\nIf the search string does not occur twice, <code>-1</code> should be returned.<br><br>\nExample: <code>secondIndexOf('White Rabbit', 'it')</code> should return <code>10</code>.",hint:"<pre><code>function secondIndexOf(s1, s2) {\n// Use indexOf twice.\n}</code></pre>",solution:"<pre><code>function secondIndexOf(s1, s2) {\n  let firstIndex = s1.indexOf(s2);\n  return s1.indexOf(s2, firstIndex + 1);\n}</code></pre>",tests:[function(){return jshero.testutil.assert_isFunction("secondIndexOf")},function(){return jshero.testutil.assert_functionHasNumOfParameter("secondIndexOf",2)},function(){return jshero.testutil.assert_functionReturns("secondIndexOf('White Rabbit', 'it')",10)},function(){return jshero.testutil.assert_functionReturns("secondIndexOf('White Rabbit', 'bit')",-1)},function(){return jshero.testutil.assert_functionReturns("secondIndexOf('Oh dear! Oh dear!', 'Oh')",9)}]});
jshero.koans.add({id:"stringlength",title:"String: length",lesson:"Strings have the <code>length</code> property. This property represents the number of characters in a string.\nTo do this, you must append <code>.length</code> to the string or to the variable that contains the string:\n\n<pre><code>let charNumber = 'Ai'.length;</code/></pre>\n\n<code>'Ai'</code> has 2 characters. So <code>charNumber</code> has the value <code>2</code>.\n\n<pre><code>let name = 'Weiwei';\ncharNumber = name.length;</code/></pre>\n\n<code>'Weiwei'</code> has 6 characters. <code>charNumber</code> now has the value <code>6</code>.\n<pre><code>charNumber = ''.length;</code/></pre>\nThe empty string has no characters. The value of <code>charNumber</code> is <code>0</code>.",task:"Write a function <code>length</code> that takes a string and returns the number of characters of the string.<br><br>\nExample: <code>length('sun')</code> should return <code>3</code>.",tests:[function(){return jshero.testutil.assert_isFunction("length")},function(){return jshero.testutil.assert_functionHasNumOfParameter("length",1)},function(){return jshero.testutil.assert_functionReturns("length('sun')",3)},function(){return jshero.testutil.assert_functionReturns("length('Hello world!')",12)},function(){return jshero.testutil.assert_functionReturns("length('')",0)}]});
jshero.koans.add({id:"stringsplit",title:"String: split()",lesson:"The <code>split</code> method splits a string into substrings using a separator string.\nThe substrings are returned as an array. The original string is not changed.\n\n<pre><code>let date = '31-10-2017';\nlet parts = date.split('-');\nlet day = parts[0]; // '31'\nlet month = parts[1]; // '10'\nlet year = parts[2]; // '2017'</code></pre>\n\nHere, the separator string is the hyphen. It splits the date string into three parts.\nThese three parts are assigned as an array to the variable <code>parts</code>.\nAfterwards, the individual parts are assigned to separate variables.",task:"Write a function <code>add</code> that takes a string with a summation task and returns its result as a\nnumber. A finite number of natural numbers should be added. The summation task is a string of the form '1+19+...+281'.<br><br>\nExample: <code>add('7+12+100')</code> should return <code>119</code>.",tests:[function(){return jshero.testutil.assert_isFunction("add")},function(){return jshero.testutil.assert_functionHasNumOfParameter("add",1)},function(){return jshero.testutil.assert_functionReturns("add('1+2')",3)},function(){return jshero.testutil.assert_functionReturns("add('12+5+1+10')",28)},function(){return jshero.testutil.assert_functionReturns("add('13+2+4+100+3')",122)},function(){return jshero.testutil.assert_functionReturns("add('50000+4000+300+20+1')",54321)}]});
jshero.koans.add({id:"stringsubstr",title:"String: substr()",lesson:"The <code>substr</code> method extracts a substring from a string:\n\n<pre><code>let see = 'see and stop'.substr(0, 3);\nlet and = 'see and stop'.substr(4, 3);\nlet stop = 'see and stop'.substr(8);</code></pre>\n\nThe first parameter specifies the position at which to start extracting.\nThe second parameter specifies the number of characters to extract.\nIf the second parameter is not set, all the characters from start position to the end of the string are extracted.",task:"Write a function <code>firstWord</code>, taking a string and returning the first word in that string.\nThe first word are all characters up to the first space.<br><br>\nExample: <code>firstWord('see and stop')</code> should return <code>'see'</code>.",hint:"<pre><code>function firstWord(s) {\n// Determine with indexOf\n// the position of the\n// first space. Then use\n// the substr method.\n}</code></pre>",solution:"<pre><code>function firstWord(s) {\n  let firstBlank = s.indexOf(' ');\n  return s.substr(0, firstBlank);\n}</code></pre>",tests:[function(){return jshero.testutil.assert_isFunction("firstWord")},function(){return jshero.testutil.assert_functionHasNumOfParameter("firstWord",1)},function(){return jshero.testutil.assert_functionReturns("firstWord('see and stop')","see")},function(){return jshero.testutil.assert_functionReturns("firstWord('speak again')","speak")}]});
jshero.koans.add({id:"stringupper",title:"String: toUpperCase()",lesson:"In addition to the <code>length</code> property, strings have methods.\nThese are functions that are applied to the string. Like the <code>length</code> property,\nthese methods are appended with a point to the string or to a variable that contains a string.\nThe arguments enclosed in parentheses follow. Two of these string methods are the parameterless\nmethods <code>toUpperCase</code> and <code>toLowerCase</code>. They return the string in\nuppercase or lowercase.\n\n<pre><code>let town = 'Mthatha';\nlet output = town.toUpperCase();</code/></pre>\n\n<code>output</code> has the value <code>'MTHATHA'</code>.\n<code>town</code> still has the value <code>'Mthatha'</code>.\n\n<pre><code>output = town.toLowerCase();</code/></pre>\n\nNow <code>output</code> has the value <code>'mthatha'</code>.",task:"Write a function <code>toCase</code> that takes a string and returns that string in\nlowercase and uppercase with <code>-</code> as delimiter.<br><br>\nExample: <code>toCase('Mthatha')</code> should return <code>'mthatha-MTHATHA'</code>.",hint:"<pre><code>function toCase(text) {\n  return ... + '-' + ...;\n}</code></pre>",solution:"<pre><code>function toCase(text) {\n  return text.toLowerCase() + '-' + text.toUpperCase();\n}</code></pre>",tests:[function(){return jshero.testutil.assert_isFunction("toCase")},function(){return jshero.testutil.assert_functionHasNumOfParameter("toCase",1)},function(){return jshero.testutil.assert_functionReturns("toCase('Mthatha')","mthatha-MTHATHA")},function(){return jshero.testutil.assert_functionReturns("toCase('Johannesburg')","johannesburg-JOHANNESBURG")}]});
(function(testutil,evaluator){jshero.koans.add({id:"subfunction",title:"Functions call functions",lesson:"Functions can call other functions:\n<pre><code>function gross(net) {\n  let vat = 20;\n  let tax = net * vat / 100;\n  return net + tax;\n}\n\nfunction addWithVat(netX, netY) {\n  let grossX = gross(netX);\n  let grossY = gross(netY);\n  return grossX + grossY;\n}</code></pre>\n\n<code>addWithVat</code> takes two net amounts and returns the sum of the gross amounts.\n<code>gross</code> calculates the gross amount from a net amount. Thereby a value added tax of 20% is assumed.\nInstead of calculating the gross amount itself, <code>addWithVat</code> use the function <code>brutto</code>.\nThis has two advantages: The code is easier to read and the gross calculation is performed centrally in one place.",task:"Write a function <code>sum</code> that takes an array of numbers and returns the sum of these numbers.\nWrite a function <code>mean</code> that takes an array of numbers and returns the average of these numbers.\nThe <code>mean</code> function should use the <code>sum</code> function.",tests:[function(){return testutil.assert_isFunction("sum")},function(){return testutil.assert_functionHasNumOfParameter("sum",1)},function(){return testutil.assert_functionReturns("sum([0])",0)},function(){return testutil.assert_functionReturns("sum([1, 2])",3)},function(){return testutil.assert_functionReturns("sum([1, 4, 10, 85])",100)},function(){return testutil.assert_functionReturns("sum([-2, -4, 17, 34])",45)},function(){return testutil.assert_isFunction("mean")},function(){return testutil.assert_functionHasNumOfParameter("mean",1)},function(){return testutil.assert_functionReturns("mean([0])",0)},function(){return testutil.assert_functionReturns("mean([1, 2])",1.5)},function(){return testutil.assert_functionReturns("mean([1, 4, 10, 85])",25)},function(){return testutil.assert_functionReturns("mean([-2, -4, 17, 34])",11.25)}]})})(jshero.testutil,jshero.evaluator);
jshero.koans.add({id:"trim",title:"String: trim()",lesson:"The <code>trim</code> method removes whitespaces from both ends of a string.\n\n<pre><code>let input = ' Rosa Parks ';\nlet name = input.trim();</code></pre>\n\n<code>name</code> contains the string <code>'Rosa Parks'</code>.\nNotice that <code>input</code> still contains the string <code>' Rosa Parks '</code>.",task:"Write a function <code>firstChar</code>, which returns the first character that is not a space\nwhen a string is passed.<br><br>\nExample: <code>firstChar(' Rosa Parks ')</code> should return <code>'R'</code>.",hint:"<pre><code>function firstChar(text) {\n// Trim first.\n// Then use the\n// charAt method.\n}</code></pre>",solution:"<pre><code>function firstChar(text) {\n  let trimmedText = text.trim();\n  return trimmedText.charAt(0);\n}</code></pre>",tests:[function(){return jshero.testutil.assert_isFunction("firstChar")},function(){return jshero.testutil.assert_functionHasNumOfParameter("firstChar",1)},function(){return jshero.testutil.assert_functionReturns("firstChar('Rosa')","R")},function(){return jshero.testutil.assert_functionReturns("firstChar(' Louise')","L")},function(){return jshero.testutil.assert_functionReturns("firstChar('  Parks')","P")}]});
(function(testutil){jshero.koans.add({id:"undefined",title:"undefined",lesson:"Up to now we had always initialized variables at declaration.\n\n<pre><code>// declaration and initialization\nlet x = 1;</code></pre>\n\nHowever, you can also declare a variable and initialize it later.\n\n<pre><code>let x; // declaration\nx = 1; // initialization</code></pre>\n\nVariables that were not initialized have the value <code>undefined</code>.<br><br>\nUninitialized variables can also occur on function calls.\nIf you call a function with a parameter without an argument, the parameter gets the value <code>undefined</code>:\n\n<pre><code>function echo(x) {\n  return x;\n}\n\n// function call without argument\nlet y = echo();</code></pre>\n\n<code>echo</code> is called without any argument.\nThe parameter <code>x</code> receives the value <code>undefined</code>. Since <code>echo</code> simply returns\nit's parameter, <code>y</code> also gets the value <code>undefined</code>.<br><br>\nA function that expects a parameter can be called without an argument.\nWhen writing functions, you should always consider what should happen in this case.\nIt is good practice in such a case to assign a default value to the parameter.\nWe had seen this with the string method <code><a href=\"stringcharat.html\">charAt(index)</a></code>.\nNormally this method returns the character at position <code>index</code>.\nIf we call <code>charAt</code> without an argument, <code>index</code> gets the default <code>0</code>.\nThe character at position <code>0</code> is returned.<br><br>\nTo check for <code>undefined</code>, use  <a href='equals.html'>strict&nbsp;equality</a>.\nTherefore, <code>charAt</code> could contain the following code snippet:\n\n<pre><code>if (index === undefined) {\n  index = 0;\n}</code></pre>",task:"Write a function <code>hello</code> having one parameter and returning <code>'Hello &lt;parameter&gt;!'</code>.\nIf <code>hello</code> is called without an argument, <code>'Hello world!'</code> should be returned.<br><br>\nExample: <code>hello('Nala')</code> should return <code>'Hello Nala!'</code>.",tests:[function(){return testutil.assert_isFunction("hello")},function(){return testutil.assert_functionHasNumOfParameter("hello",1)},function(){return testutil.assert_functionReturns("hello('Nala')","Hello Nala!")},function(){return testutil.assert_functionReturns("hello('Badu')","Hello Badu!")},function(){return testutil.assert_functionReturns("hello()","Hello world!")}]})})(jshero.testutil);
jshero.koans.add({id:"var",title:"Variables",lesson:"<a href='https://en.wikipedia.org/wiki/JavaScript'>JavaScript</a> programs consist of a series of statements.\nEach statement performs an elementary operation.\nBy executing many instructions you can finally solve complex tasks.\nEach statement is written in a line and closed with a semicolon.<br><br>\nAn elementary statement is the declaration and initialization of a variable. A variable is a container for a value. The statement\n<pre><code>let city = 'Porbandar';</code></pre>\ndeclares a variable with the name <code>city</code> and initializes it with the value <code>'Porbandar'</code>.\nThe variable is declared with the keyword <code>let</code>.\nUse the equals sign, the assignment operator, to assign a value to the variable.\nNote: JavaScript is case-sensitive. <code>city</code> and <code>City</code> are two different variables.",task:"Declare a variable <code>firstname</code> and initialize it with the value <code>'Lata'</code>.",hint:"<pre><code>let firstname = ...</code></pre>",solution:"<pre><code>let firstname = 'Lata';</code></pre>",tests:[function(){return jshero.testutil.assert_variableDefined("firstname")},function(){return jshero.testutil.assert_variableHasValue("firstname","Lata")}]});
jshero.koans.add({id:"var2",title:"Several variables",lesson:"Several variables are declared and initialized in 2 program lines:\n<pre><code>let city = 'Lubumbashi';\nlet country = 'Congo';</code></pre>",task:"Declare a variable <code>flower</code> and assign it the value <code>'rose'</code>.\nDeclare a second variable <code>tree</code> and assign it the value <code>'maple'</code>.",tests:[function(){return jshero.testutil.assert_variableDefined("flower")},function(){return jshero.testutil.assert_variableHasValue("flower","rose")},function(){return jshero.testutil.assert_variableDefined("tree")},function(){return jshero.testutil.assert_variableHasValue("tree","maple")}]});
jshero.koans.add({id:"while",title:"while loop",lesson:"The <code>while</code> loop has only a loop condition.\nThe loop code is executed as long as the condition is <code>true</code>.\nIf the condition results in <code>false</code>, the loop is terminated\nand the code execution proceeds after the loop.\n\n<pre><code>let threeX = '';\nwhile (threeX.length < 3) {\n  threeX = threeX + 'x';\n}</code></pre>\n\nAs long as <code>threeX</code> has less than 3 characters, it is supplemented by <code>'x'</code>.\nIf <code>threeX</code> has the length 3, the loop is terminated.\n<code>threeX</code> has the value <code>'xxx'</code>.",task:"Write a function <code>spaces</code> that takes a natural number n and returns a string of n spaces.<br><br>\nExample: <code>spaces(1)</code> should return <code>' '</code>.",tests:[function(){return jshero.testutil.assert_isFunction("spaces")},function(){return jshero.testutil.assert_functionHasNumOfParameter("spaces",1)},function(){return jshero.testutil.assert_functionReturns("spaces(0)","")},function(){return jshero.testutil.assert_functionReturns("spaces(1)"," ")},function(){return jshero.testutil.assert_functionReturns("spaces(2)","  ")},function(){return jshero.testutil.assert_functionReturns("spaces(3)","   ")}]});
jshero.koans.add({id:"xor",title:"XOR",lesson:"The Boolean operators have an order: First NOT, then AND, last OR.\nIf you want to change this order, use parentheses:\n\n<pre><code>let x1 = true || false && false;\nlet x2 = (true || false) && false;\nlet x3 = !false && false;\nlet x4 = !(false && false);</code></pre>\n\nIn the 1st line <code>&&</code> is evaluated first. <code>x1</code> is <code>true</code>.\nIn the 2nd line <code>||</code> is evaluated first. <code>x2</code> is <code>false</code>.\nIn the 3rd line <code>!</code> is evaluated first. <code>x3</code> is <code>false</code>.\nIn the 4th line <code>&&</code> is evaluated first. <code>x4</code> is <code>true</code>.<br><br>\n\nIn the following task you should code another important gate, the XOR (eXclusive OR) gate.",task:"Write a function <code>xor</code> that takes two Boolean values. If both values are different, the result should\nbe <code>true</code>. If both values are the same, the result should be <code>false</code>.<br><br>\nI.e.: The calls <code>xor(true,&nbsp;false)</code> and <code>xor(false,&nbsp;true)</code> should return <code>true</code>.\nThe calls <code>xor(true,&nbsp;true)</code> and <code>xor(false,&nbsp;false)</code> should return <code>false</code>.",hint:"Write an expression that returns <code>true</code> only if the first parameter is <code>true</code> and the second is <code>false</code>.\nThen write an expression that returns <code>true</code> only if the first parameter is <code>false</code> and the second is <code>true</code>.\nCombine both expressions appropriately.",solution:"<pre><code>function xor(a, b) {\n  return a && !b || !a && b;\n}</code></pre>",tests:[function(){return jshero.testutil.assert_isFunction("xor")},function(){return jshero.testutil.assert_functionHasNumOfParameter("xor",2)},function(){return jshero.testutil.assert_functionReturns("xor(true, true)",false)},function(){return jshero.testutil.assert_functionReturns("xor(false, false)",false)},function(){return jshero.testutil.assert_functionReturns("xor(true, false)",true)},function(){return jshero.testutil.assert_functionReturns("xor(false, true)",true)}]});
jshero.koans.initReorder(["var","jsx01","var2","jsx02","jsx03","function","function2","functioncall","jsx04","parameter","jsx05","string","jsx06","jsx06b","log1","log2","log","jsx07","playground","stringlength","stringupper","stringcharat","trim","stringindexof","stringindexof2","stringsubstr","replace","number","increment","fahrenheit","modulo","mean","math","minmax","pi","round","random","parseint","bool","nor","xor","equals","equals2","even","notequals","greaterthan","if","if2","else","elseif","array","array2","array3","arraylength","arraysort","arraypush","arrayindexof","concat","slice","join","dimarray","comment","undefined","null","for1","factorial","for2","while","dowhile","ggt","break","doubleloop","arguments","nan","stringsplit","subfunction","recursion","roman1","roman2","euler1","further"]);
