(function(testutil,evaluator){let evalDice=function(){return evaluator.evalTest("dice()")};let isOneToSix=function(x){return x===1||x===2||x===3||x===4||x===5||x===6};let throwA=function(x){let result;for(let i=0;i<1000;i++){result=evalDice();if(result===x){return true}}return false};let testWith=function(x){let ok,msg,e;try{ok=throwA(x);if(ok){msg="<code>dice()</code> gab bei 1000 Aufrufen mindestens einmal <code>"+x+"</code> zur\xFCck."}else{msg="<code>dice()</code> gab bei 1000 Aufrufen keine <code>"+x+"</code> zur\xFCck."}}catch(exc){ok=false;msg="Fehler beim Aufruf von <code>dice()</code>.";e=exc}return{ok:ok,msg:msg,e:e}};jshero.koans.add({id:"random",title:"Zufallszahlen",lesson:"Mit <code>Math.random()</code> erzeugt man eine Pseudozufallszahl zwischen 0 (inklusive) und 1 (exklusive).\n\n<pre><code>let x = Math.random();</code></pre>\n\n<code>x</code> k\xF6nnte z.B. den Wert <code>0.6206372241429993</code> erhalten.\nJeder Aufruf von <code>Math.random()</code> generiert eine neue Pseudozufallszahl.\nDie Zahlen sind zwischen 0 und 1 gleichverteilt. Sie hei\xDFen Pseudozufallszahlen,\nweil sie zuf\xE4llig aussehen, aber dennoch berechnet werden.\nM\xF6chte man Zufallszahlen in einem anderen Wertebereich oder mit einer anderen Verteilung erhalten,\nmuss man die von <code>Math.random()</code> generierten Zahlen\ngeeignet transformieren. Das soll jetzt gleich ge\xFCbt werden.",task:"Schreibe eine Funktion <code>dice</code>, die wie ein W\xFCrfel eine Zufallszahl zwischen 1 und 6 zur\xFCckgibt.",tests:[function(){return testutil.assert_isFunction("dice")},function(){return testutil.assert_functionHasNumOfParameter("dice",0)},function(){let ok,msg,e;try{ok=true;let result;for(let i=0;i<1000;i++){result=evalDice();if(!isOneToSix(result)){ok=false;break}}if(ok){msg="<code>dice()</code> gab bei 1000 Aufrufen nur nat\xFCrliche Zahlen zwischen <code>1</code> und <code>6</code> zur\xFCck."}else{msg="<code>dice()</code> gab bei 1000 Aufrufen mindestens einmal <code>"+JSON.stringify(result)+"</code> zur\xFCck. Dies ist keine nat\xFCrliche Zahl zwischen <code>1</code> und <code>6</code>."}}catch(exc){ok=false;msg="Fehler beim Aufruf von <code>dice()</code>.";e=exc}return{ok:ok,msg:msg,e:e}},function(){return testWith(1)},function(){return testWith(2)},function(){return testWith(3)},function(){return testWith(4)},function(){return testWith(5)},function(){return testWith(6)}]})})(jshero.testutil,jshero.evaluator);